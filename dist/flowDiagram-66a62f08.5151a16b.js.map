{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,E,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,C,E,C,Q,C,S,C,C,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GCKA,EAAA,MAAA,CAAA,EAAA,UAAA,IAAS,GAAT,EAAA,MAAA,CAAA,EAAA,YAAA,IAAkB,GAAlB,EAAA,MAAA,CAAA,EAAA,OAAA,IAA6B,EAAA,IAAG,EAAhC,EAAA,MAAA,CAAA,EAAA,SAAA,IAAmC,EAAA,MAAK,EALxC,IAAA,EAAA,EAAA,gBACA,EAAA,EAAA,eACA,EAAA,EAAA,kBACA,EAAA,EAAA,kB,E,C,e,Q,c,Q,iB,Q,kB,Q,iD,O,E,C,Q,C,S,C,C,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GCAA,EAAA,MAAA,CAAA,EAAA,MAAA,IAAS,GAAT,EAAA,MAAA,CAAA,EAAA,OAAA,IAAc,GAHd,IAAA,EAAA,EAAA,aACA,EAAA,EAAA,mBAIA,SAAS,EAAI,CAAC,EACZ,IAiBI,EACA,EACA,EAnBA,EAAM,AAAwB,WAAxB,EAAE,KAAK,GAAG,SAAS,C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","sources":["<anon>","node_modules/dagre-d3-es/src/dagre/index.js","node_modules/dagre-d3-es/src/dagre/acyclic.js","node_modules/dagre-d3-es/src/dagre/greedy-fas.js","node_modules/dagre-d3-es/src/dagre/data/list.js","node_modules/dagre-d3-es/src/dagre/layout.js","node_modules/dagre-d3-es/src/dagre/add-border-segments.js","node_modules/dagre-d3-es/src/dagre/util.js","node_modules/dagre-d3-es/src/dagre/coordinate-system.js","node_modules/dagre-d3-es/src/dagre/normalize.js","node_modules/dagre-d3-es/src/dagre/rank/index.js","node_modules/dagre-d3-es/src/dagre/rank/feasible-tree.js","node_modules/dagre-d3-es/src/dagre/rank/util.js","node_modules/dagre-d3-es/src/dagre/rank/network-simplex.js","node_modules/dagre-d3-es/src/graphlib/alg/index.js","node_modules/dagre-d3-es/src/graphlib/alg/components.js","node_modules/dagre-d3-es/src/graphlib/alg/dijkstra.js","node_modules/dagre-d3-es/src/graphlib/data/priority-queue.js","node_modules/dagre-d3-es/src/graphlib/alg/dijkstra-all.js","node_modules/dagre-d3-es/src/graphlib/alg/find-cycles.js","node_modules/dagre-d3-es/src/graphlib/alg/tarjan.js","node_modules/dagre-d3-es/src/graphlib/alg/floyd-warshall.js","node_modules/dagre-d3-es/src/graphlib/alg/is-acyclic.js","node_modules/dagre-d3-es/src/graphlib/alg/topsort.js","node_modules/dagre-d3-es/src/graphlib/alg/postorder.js","node_modules/dagre-d3-es/src/graphlib/alg/dfs.js","node_modules/dagre-d3-es/src/graphlib/alg/preorder.js","node_modules/dagre-d3-es/src/graphlib/alg/prim.js","node_modules/dagre-d3-es/src/dagre/nesting-graph.js","node_modules/dagre-d3-es/src/dagre/order/index.js","node_modules/dagre-d3-es/src/dagre/order/add-subgraph-constraints.js","node_modules/dagre-d3-es/src/dagre/order/build-layer-graph.js","node_modules/dagre-d3-es/src/dagre/order/cross-count.js","node_modules/dagre-d3-es/src/dagre/order/init-order.js","node_modules/dagre-d3-es/src/dagre/order/sort-subgraph.js","node_modules/dagre-d3-es/src/dagre/order/barycenter.js","node_modules/dagre-d3-es/src/dagre/order/resolve-conflicts.js","node_modules/dagre-d3-es/src/dagre/order/sort.js","node_modules/dagre-d3-es/src/dagre/parent-dummy-chains.js","node_modules/dagre-d3-es/src/dagre/position/index.js","node_modules/dagre-d3-es/src/dagre/position/bk.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        globalObject\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"9xp7T\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"acyclic\", ()=>_acyclicJs);\nparcelHelpers.export(exports, \"normalize\", ()=>_normalizeJs);\nparcelHelpers.export(exports, \"rank\", ()=>(0, _indexJs.rank));\nparcelHelpers.export(exports, \"layout\", ()=>(0, _layoutJs.layout));\nvar _acyclicJs = require(\"./acyclic.js\");\nvar _layoutJs = require(\"./layout.js\");\nvar _normalizeJs = require(\"./normalize.js\");\nvar _indexJs = require(\"./rank/index.js\");\n\n},{\"./acyclic.js\":\"65tNo\",\"./layout.js\":\"dQEd2\",\"./normalize.js\":\"jEd9R\",\"./rank/index.js\":\"7Hj7F\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"65tNo\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"run\", ()=>run);\nparcelHelpers.export(exports, \"undo\", ()=>undo);\nvar _lodashEs = require(\"lodash-es\");\nvar _greedyFasJs = require(\"./greedy-fas.js\");\nfunction run(g) {\n    var fas = g.graph().acyclicer === 'greedy' ? (0, _greedyFasJs.greedyFAS)(g, weightFn(g)) : dfsFAS(g);\n    _lodashEs.forEach(fas, function(e) {\n        var label = g.edge(e);\n        g.removeEdge(e);\n        label.forwardName = e.name;\n        label.reversed = true;\n        g.setEdge(e.w, e.v, label, _lodashEs.uniqueId('rev'));\n    });\n    function weightFn(g) {\n        return function(e) {\n            return g.edge(e).weight;\n        };\n    }\n}\nfunction dfsFAS(g) {\n    var fas = [];\n    var stack = {};\n    var visited = {};\n    function dfs(v) {\n        if (_lodashEs.has(visited, v)) return;\n        visited[v] = true;\n        stack[v] = true;\n        _lodashEs.forEach(g.outEdges(v), function(e) {\n            if (_lodashEs.has(stack, e.w)) fas.push(e);\n            else dfs(e.w);\n        });\n        delete stack[v];\n    }\n    _lodashEs.forEach(g.nodes(), dfs);\n    return fas;\n}\nfunction undo(g) {\n    _lodashEs.forEach(g.edges(), function(e) {\n        var label = g.edge(e);\n        if (label.reversed) {\n            g.removeEdge(e);\n            var forwardName = label.forwardName;\n            delete label.reversed;\n            delete label.forwardName;\n            g.setEdge(e.w, e.v, label, forwardName);\n        }\n    });\n}\n\n},{\"lodash-es\":\"h4a9d\",\"./greedy-fas.js\":\"4BAH6\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"4BAH6\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n */ parcelHelpers.export(exports, \"greedyFAS\", ()=>greedyFAS);\nvar _lodashEs = require(\"lodash-es\");\nvar _indexJs = require(\"../graphlib/index.js\");\nvar _listJs = require(\"./data/list.js\");\nvar DEFAULT_WEIGHT_FN = _lodashEs.constant(1);\nfunction greedyFAS(g, weightFn) {\n    if (g.nodeCount() <= 1) return [];\n    var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);\n    var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\n    // Expand multi-edges\n    return _lodashEs.flatten(_lodashEs.map(results, function(e) {\n        return g.outEdges(e.v, e.w);\n    }));\n}\nfunction doGreedyFAS(g, buckets, zeroIdx) {\n    var results = [];\n    var sources = buckets[buckets.length - 1];\n    var sinks = buckets[0];\n    var entry;\n    while(g.nodeCount()){\n        while(entry = sinks.dequeue())removeNode(g, buckets, zeroIdx, entry);\n        while(entry = sources.dequeue())removeNode(g, buckets, zeroIdx, entry);\n        if (g.nodeCount()) for(var i = buckets.length - 2; i > 0; --i){\n            entry = buckets[i].dequeue();\n            if (entry) {\n                results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));\n                break;\n            }\n        }\n    }\n    return results;\n}\nfunction removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {\n    var results = collectPredecessors ? [] : undefined;\n    _lodashEs.forEach(g.inEdges(entry.v), function(edge) {\n        var weight = g.edge(edge);\n        var uEntry = g.node(edge.v);\n        if (collectPredecessors) results.push({\n            v: edge.v,\n            w: edge.w\n        });\n        uEntry.out -= weight;\n        assignBucket(buckets, zeroIdx, uEntry);\n    });\n    _lodashEs.forEach(g.outEdges(entry.v), function(edge) {\n        var weight = g.edge(edge);\n        var w = edge.w;\n        var wEntry = g.node(w);\n        wEntry['in'] -= weight;\n        assignBucket(buckets, zeroIdx, wEntry);\n    });\n    g.removeNode(entry.v);\n    return results;\n}\nfunction buildState(g, weightFn) {\n    var fasGraph = new (0, _indexJs.Graph)();\n    var maxIn = 0;\n    var maxOut = 0;\n    _lodashEs.forEach(g.nodes(), function(v) {\n        fasGraph.setNode(v, {\n            v: v,\n            in: 0,\n            out: 0\n        });\n    });\n    // Aggregate weights on nodes, but also sum the weights across multi-edges\n    // into a single edge for the fasGraph.\n    _lodashEs.forEach(g.edges(), function(e) {\n        var prevWeight = fasGraph.edge(e.v, e.w) || 0;\n        var weight = weightFn(e);\n        var edgeWeight = prevWeight + weight;\n        fasGraph.setEdge(e.v, e.w, edgeWeight);\n        maxOut = Math.max(maxOut, fasGraph.node(e.v).out += weight);\n        maxIn = Math.max(maxIn, fasGraph.node(e.w)['in'] += weight);\n    });\n    var buckets = _lodashEs.range(maxOut + maxIn + 3).map(function() {\n        return new (0, _listJs.List)();\n    });\n    var zeroIdx = maxIn + 1;\n    _lodashEs.forEach(fasGraph.nodes(), function(v) {\n        assignBucket(buckets, zeroIdx, fasGraph.node(v));\n    });\n    return {\n        graph: fasGraph,\n        buckets: buckets,\n        zeroIdx: zeroIdx\n    };\n}\nfunction assignBucket(buckets, zeroIdx, entry) {\n    if (!entry.out) buckets[0].enqueue(entry);\n    else if (!entry['in']) buckets[buckets.length - 1].enqueue(entry);\n    else buckets[entry.out - entry['in'] + zeroIdx].enqueue(entry);\n}\n\n},{\"lodash-es\":\"h4a9d\",\"../graphlib/index.js\":\"j6NXy\",\"./data/list.js\":\"5qavm\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"5qavm\":[function(require,module,exports,__globalThis) {\n/*\n * Simple doubly linked list implementation derived from Cormen, et al.,\n * \"Introduction to Algorithms\".\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"List\", ()=>List);\nclass List {\n    constructor(){\n        var sentinel = {};\n        sentinel._next = sentinel._prev = sentinel;\n        this._sentinel = sentinel;\n    }\n    dequeue() {\n        var sentinel = this._sentinel;\n        var entry = sentinel._prev;\n        if (entry !== sentinel) {\n            unlink(entry);\n            return entry;\n        }\n    }\n    enqueue(entry) {\n        var sentinel = this._sentinel;\n        if (entry._prev && entry._next) unlink(entry);\n        entry._next = sentinel._next;\n        sentinel._next._prev = entry;\n        sentinel._next = entry;\n        entry._prev = sentinel;\n    }\n    toString() {\n        var strs = [];\n        var sentinel = this._sentinel;\n        var curr = sentinel._prev;\n        while(curr !== sentinel){\n            strs.push(JSON.stringify(curr, filterOutLinks));\n            curr = curr._prev;\n        }\n        return '[' + strs.join(', ') + ']';\n    }\n}\nfunction unlink(entry) {\n    entry._prev._next = entry._next;\n    entry._next._prev = entry._prev;\n    delete entry._next;\n    delete entry._prev;\n}\nfunction filterOutLinks(k, v) {\n    if (k !== '_next' && k !== '_prev') return v;\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"dQEd2\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"layout\", ()=>layout);\nvar _lodashEs = require(\"lodash-es\");\nvar _indexJs = require(\"../graphlib/index.js\");\nvar _addBorderSegmentsJs = require(\"./add-border-segments.js\");\nvar _coordinateSystemJs = require(\"./coordinate-system.js\");\nvar _acyclicJs = require(\"./acyclic.js\");\nvar _normalizeJs = require(\"./normalize.js\");\nvar _indexJs1 = require(\"./rank/index.js\");\nvar _nestingGraphJs = require(\"./nesting-graph.js\");\nvar _indexJs2 = require(\"./order/index.js\");\nvar _parentDummyChainsJs = require(\"./parent-dummy-chains.js\");\nvar _indexJs3 = require(\"./position/index.js\");\nvar _utilJs = require(\"./util.js\");\nfunction layout(g, opts) {\n    var time = opts && opts.debugTiming ? _utilJs.time : _utilJs.notime;\n    time('layout', function() {\n        var layoutGraph = time('  buildLayoutGraph', function() {\n            return buildLayoutGraph(g);\n        });\n        time('  runLayout', function() {\n            runLayout(layoutGraph, time);\n        });\n        time('  updateInputGraph', function() {\n            updateInputGraph(g, layoutGraph);\n        });\n    });\n}\nfunction runLayout(g, time) {\n    time('    makeSpaceForEdgeLabels', function() {\n        makeSpaceForEdgeLabels(g);\n    });\n    time('    removeSelfEdges', function() {\n        removeSelfEdges(g);\n    });\n    time('    acyclic', function() {\n        _acyclicJs.run(g);\n    });\n    time('    nestingGraph.run', function() {\n        _nestingGraphJs.run(g);\n    });\n    time('    rank', function() {\n        (0, _indexJs1.rank)(_utilJs.asNonCompoundGraph(g));\n    });\n    time('    injectEdgeLabelProxies', function() {\n        injectEdgeLabelProxies(g);\n    });\n    time('    removeEmptyRanks', function() {\n        _utilJs.removeEmptyRanks(g);\n    });\n    time('    nestingGraph.cleanup', function() {\n        _nestingGraphJs.cleanup(g);\n    });\n    time('    normalizeRanks', function() {\n        _utilJs.normalizeRanks(g);\n    });\n    time('    assignRankMinMax', function() {\n        assignRankMinMax(g);\n    });\n    time('    removeEdgeLabelProxies', function() {\n        removeEdgeLabelProxies(g);\n    });\n    time('    normalize.run', function() {\n        _normalizeJs.run(g);\n    });\n    time('    parentDummyChains', function() {\n        (0, _parentDummyChainsJs.parentDummyChains)(g);\n    });\n    time('    addBorderSegments', function() {\n        (0, _addBorderSegmentsJs.addBorderSegments)(g);\n    });\n    time('    order', function() {\n        (0, _indexJs2.order)(g);\n    });\n    time('    insertSelfEdges', function() {\n        insertSelfEdges(g);\n    });\n    time('    adjustCoordinateSystem', function() {\n        _coordinateSystemJs.adjust(g);\n    });\n    time('    position', function() {\n        (0, _indexJs3.position)(g);\n    });\n    time('    positionSelfEdges', function() {\n        positionSelfEdges(g);\n    });\n    time('    removeBorderNodes', function() {\n        removeBorderNodes(g);\n    });\n    time('    normalize.undo', function() {\n        _normalizeJs.undo(g);\n    });\n    time('    fixupEdgeLabelCoords', function() {\n        fixupEdgeLabelCoords(g);\n    });\n    time('    undoCoordinateSystem', function() {\n        _coordinateSystemJs.undo(g);\n    });\n    time('    translateGraph', function() {\n        translateGraph(g);\n    });\n    time('    assignNodeIntersects', function() {\n        assignNodeIntersects(g);\n    });\n    time('    reversePoints', function() {\n        reversePointsForReversedEdges(g);\n    });\n    time('    acyclic.undo', function() {\n        _acyclicJs.undo(g);\n    });\n}\n/*\n * Copies final layout information from the layout graph back to the input\n * graph. This process only copies whitelisted attributes from the layout graph\n * to the input graph, so it serves as a good place to determine what\n * attributes can influence layout.\n */ function updateInputGraph(inputGraph, layoutGraph) {\n    _lodashEs.forEach(inputGraph.nodes(), function(v) {\n        var inputLabel = inputGraph.node(v);\n        var layoutLabel = layoutGraph.node(v);\n        if (inputLabel) {\n            inputLabel.x = layoutLabel.x;\n            inputLabel.y = layoutLabel.y;\n            if (layoutGraph.children(v).length) {\n                inputLabel.width = layoutLabel.width;\n                inputLabel.height = layoutLabel.height;\n            }\n        }\n    });\n    _lodashEs.forEach(inputGraph.edges(), function(e) {\n        var inputLabel = inputGraph.edge(e);\n        var layoutLabel = layoutGraph.edge(e);\n        inputLabel.points = layoutLabel.points;\n        if (_lodashEs.has(layoutLabel, 'x')) {\n            inputLabel.x = layoutLabel.x;\n            inputLabel.y = layoutLabel.y;\n        }\n    });\n    inputGraph.graph().width = layoutGraph.graph().width;\n    inputGraph.graph().height = layoutGraph.graph().height;\n}\nvar graphNumAttrs = [\n    'nodesep',\n    'edgesep',\n    'ranksep',\n    'marginx',\n    'marginy'\n];\nvar graphDefaults = {\n    ranksep: 50,\n    edgesep: 20,\n    nodesep: 50,\n    rankdir: 'tb'\n};\nvar graphAttrs = [\n    'acyclicer',\n    'ranker',\n    'rankdir',\n    'align'\n];\nvar nodeNumAttrs = [\n    'width',\n    'height'\n];\nvar nodeDefaults = {\n    width: 0,\n    height: 0\n};\nvar edgeNumAttrs = [\n    'minlen',\n    'weight',\n    'width',\n    'height',\n    'labeloffset'\n];\nvar edgeDefaults = {\n    minlen: 1,\n    weight: 1,\n    width: 0,\n    height: 0,\n    labeloffset: 10,\n    labelpos: 'r'\n};\nvar edgeAttrs = [\n    'labelpos'\n];\n/*\n * Constructs a new graph from the input graph, which can be used for layout.\n * This process copies only whitelisted attributes from the input graph to the\n * layout graph. Thus this function serves as a good place to determine what\n * attributes can influence layout.\n */ function buildLayoutGraph(inputGraph) {\n    var g = new (0, _indexJs.Graph)({\n        multigraph: true,\n        compound: true\n    });\n    var graph = canonicalize(inputGraph.graph());\n    g.setGraph(_lodashEs.merge({}, graphDefaults, selectNumberAttrs(graph, graphNumAttrs), _lodashEs.pick(graph, graphAttrs)));\n    _lodashEs.forEach(inputGraph.nodes(), function(v) {\n        var node = canonicalize(inputGraph.node(v));\n        g.setNode(v, _lodashEs.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));\n        g.setParent(v, inputGraph.parent(v));\n    });\n    _lodashEs.forEach(inputGraph.edges(), function(e) {\n        var edge = canonicalize(inputGraph.edge(e));\n        g.setEdge(e, _lodashEs.merge({}, edgeDefaults, selectNumberAttrs(edge, edgeNumAttrs), _lodashEs.pick(edge, edgeAttrs)));\n    });\n    return g;\n}\n/*\n * This idea comes from the Gansner paper: to account for edge labels in our\n * layout we split each rank in half by doubling minlen and halving ranksep.\n * Then we can place labels at these mid-points between nodes.\n *\n * We also add some minimal padding to the width to push the label for the edge\n * away from the edge itself a bit.\n */ function makeSpaceForEdgeLabels(g) {\n    var graph = g.graph();\n    graph.ranksep /= 2;\n    _lodashEs.forEach(g.edges(), function(e) {\n        var edge = g.edge(e);\n        edge.minlen *= 2;\n        if (edge.labelpos.toLowerCase() !== 'c') {\n            if (graph.rankdir === 'TB' || graph.rankdir === 'BT') edge.width += edge.labeloffset;\n            else edge.height += edge.labeloffset;\n        }\n    });\n}\n/*\n * Creates temporary dummy nodes that capture the rank in which each edge's\n * label is going to, if it has one of non-zero width and height. We do this\n * so that we can safely remove empty ranks while preserving balance for the\n * label's position.\n */ function injectEdgeLabelProxies(g) {\n    _lodashEs.forEach(g.edges(), function(e) {\n        var edge = g.edge(e);\n        if (edge.width && edge.height) {\n            var v = g.node(e.v);\n            var w = g.node(e.w);\n            var label = {\n                rank: (w.rank - v.rank) / 2 + v.rank,\n                e: e\n            };\n            _utilJs.addDummyNode(g, 'edge-proxy', label, '_ep');\n        }\n    });\n}\nfunction assignRankMinMax(g) {\n    var maxRank = 0;\n    _lodashEs.forEach(g.nodes(), function(v) {\n        var node = g.node(v);\n        if (node.borderTop) {\n            node.minRank = g.node(node.borderTop).rank;\n            node.maxRank = g.node(node.borderBottom).rank;\n            // @ts-expect-error\n            maxRank = _lodashEs.max(maxRank, node.maxRank);\n        }\n    });\n    g.graph().maxRank = maxRank;\n}\nfunction removeEdgeLabelProxies(g) {\n    _lodashEs.forEach(g.nodes(), function(v) {\n        var node = g.node(v);\n        if (node.dummy === 'edge-proxy') {\n            g.edge(node.e).labelRank = node.rank;\n            g.removeNode(v);\n        }\n    });\n}\nfunction translateGraph(g) {\n    var minX = Number.POSITIVE_INFINITY;\n    var maxX = 0;\n    var minY = Number.POSITIVE_INFINITY;\n    var maxY = 0;\n    var graphLabel = g.graph();\n    var marginX = graphLabel.marginx || 0;\n    var marginY = graphLabel.marginy || 0;\n    function getExtremes(attrs) {\n        var x = attrs.x;\n        var y = attrs.y;\n        var w = attrs.width;\n        var h = attrs.height;\n        minX = Math.min(minX, x - w / 2);\n        maxX = Math.max(maxX, x + w / 2);\n        minY = Math.min(minY, y - h / 2);\n        maxY = Math.max(maxY, y + h / 2);\n    }\n    _lodashEs.forEach(g.nodes(), function(v) {\n        getExtremes(g.node(v));\n    });\n    _lodashEs.forEach(g.edges(), function(e) {\n        var edge = g.edge(e);\n        if (_lodashEs.has(edge, 'x')) getExtremes(edge);\n    });\n    minX -= marginX;\n    minY -= marginY;\n    _lodashEs.forEach(g.nodes(), function(v) {\n        var node = g.node(v);\n        node.x -= minX;\n        node.y -= minY;\n    });\n    _lodashEs.forEach(g.edges(), function(e) {\n        var edge = g.edge(e);\n        _lodashEs.forEach(edge.points, function(p) {\n            p.x -= minX;\n            p.y -= minY;\n        });\n        if (_lodashEs.has(edge, 'x')) edge.x -= minX;\n        if (_lodashEs.has(edge, 'y')) edge.y -= minY;\n    });\n    graphLabel.width = maxX - minX + marginX;\n    graphLabel.height = maxY - minY + marginY;\n}\nfunction assignNodeIntersects(g) {\n    _lodashEs.forEach(g.edges(), function(e) {\n        var edge = g.edge(e);\n        var nodeV = g.node(e.v);\n        var nodeW = g.node(e.w);\n        var p1, p2;\n        if (!edge.points) {\n            edge.points = [];\n            p1 = nodeW;\n            p2 = nodeV;\n        } else {\n            p1 = edge.points[0];\n            p2 = edge.points[edge.points.length - 1];\n        }\n        edge.points.unshift(_utilJs.intersectRect(nodeV, p1));\n        edge.points.push(_utilJs.intersectRect(nodeW, p2));\n    });\n}\nfunction fixupEdgeLabelCoords(g) {\n    _lodashEs.forEach(g.edges(), function(e) {\n        var edge = g.edge(e);\n        if (_lodashEs.has(edge, 'x')) {\n            if (edge.labelpos === 'l' || edge.labelpos === 'r') edge.width -= edge.labeloffset;\n            switch(edge.labelpos){\n                case 'l':\n                    edge.x -= edge.width / 2 + edge.labeloffset;\n                    break;\n                case 'r':\n                    edge.x += edge.width / 2 + edge.labeloffset;\n                    break;\n            }\n        }\n    });\n}\nfunction reversePointsForReversedEdges(g) {\n    _lodashEs.forEach(g.edges(), function(e) {\n        var edge = g.edge(e);\n        if (edge.reversed) edge.points.reverse();\n    });\n}\nfunction removeBorderNodes(g) {\n    _lodashEs.forEach(g.nodes(), function(v) {\n        if (g.children(v).length) {\n            var node = g.node(v);\n            var t = g.node(node.borderTop);\n            var b = g.node(node.borderBottom);\n            var l = g.node(_lodashEs.last(node.borderLeft));\n            var r = g.node(_lodashEs.last(node.borderRight));\n            node.width = Math.abs(r.x - l.x);\n            node.height = Math.abs(b.y - t.y);\n            node.x = l.x + node.width / 2;\n            node.y = t.y + node.height / 2;\n        }\n    });\n    _lodashEs.forEach(g.nodes(), function(v) {\n        if (g.node(v).dummy === 'border') g.removeNode(v);\n    });\n}\nfunction removeSelfEdges(g) {\n    _lodashEs.forEach(g.edges(), function(e) {\n        if (e.v === e.w) {\n            var node = g.node(e.v);\n            if (!node.selfEdges) node.selfEdges = [];\n            node.selfEdges.push({\n                e: e,\n                label: g.edge(e)\n            });\n            g.removeEdge(e);\n        }\n    });\n}\nfunction insertSelfEdges(g) {\n    var layers = _utilJs.buildLayerMatrix(g);\n    _lodashEs.forEach(layers, function(layer) {\n        var orderShift = 0;\n        _lodashEs.forEach(layer, function(v, i) {\n            var node = g.node(v);\n            node.order = i + orderShift;\n            _lodashEs.forEach(node.selfEdges, function(selfEdge) {\n                _utilJs.addDummyNode(g, 'selfedge', {\n                    width: selfEdge.label.width,\n                    height: selfEdge.label.height,\n                    rank: node.rank,\n                    order: i + ++orderShift,\n                    e: selfEdge.e,\n                    label: selfEdge.label\n                }, '_se');\n            });\n            delete node.selfEdges;\n        });\n    });\n}\nfunction positionSelfEdges(g) {\n    _lodashEs.forEach(g.nodes(), function(v) {\n        var node = g.node(v);\n        if (node.dummy === 'selfedge') {\n            var selfNode = g.node(node.e.v);\n            var x = selfNode.x + selfNode.width / 2;\n            var y = selfNode.y;\n            var dx = node.x - x;\n            var dy = selfNode.height / 2;\n            g.setEdge(node.e, node.label);\n            g.removeNode(v);\n            node.label.points = [\n                {\n                    x: x + 2 * dx / 3,\n                    y: y - dy\n                },\n                {\n                    x: x + 5 * dx / 6,\n                    y: y - dy\n                },\n                {\n                    x: x + dx,\n                    y: y\n                },\n                {\n                    x: x + 5 * dx / 6,\n                    y: y + dy\n                },\n                {\n                    x: x + 2 * dx / 3,\n                    y: y + dy\n                }\n            ];\n            node.label.x = node.x;\n            node.label.y = node.y;\n        }\n    });\n}\nfunction selectNumberAttrs(obj, attrs) {\n    return _lodashEs.mapValues(_lodashEs.pick(obj, attrs), Number);\n}\nfunction canonicalize(attrs) {\n    var newAttrs = {};\n    _lodashEs.forEach(attrs, function(v, k) {\n        newAttrs[k.toLowerCase()] = v;\n    });\n    return newAttrs;\n}\n\n},{\"lodash-es\":\"h4a9d\",\"../graphlib/index.js\":\"j6NXy\",\"./add-border-segments.js\":\"bWCM7\",\"./coordinate-system.js\":\"gOcH8\",\"./acyclic.js\":\"65tNo\",\"./normalize.js\":\"jEd9R\",\"./rank/index.js\":\"7Hj7F\",\"./nesting-graph.js\":\"cCWnA\",\"./order/index.js\":\"bIgS9\",\"./parent-dummy-chains.js\":\"6Jejx\",\"./position/index.js\":\"lUl3t\",\"./util.js\":\"h7o6h\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"bWCM7\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"addBorderSegments\", ()=>addBorderSegments);\nvar _lodashEs = require(\"lodash-es\");\nvar _utilJs = require(\"./util.js\");\nfunction addBorderSegments(g) {\n    function dfs(v) {\n        var children = g.children(v);\n        var node = g.node(v);\n        if (children.length) _lodashEs.forEach(children, dfs);\n        if (_lodashEs.has(node, 'minRank')) {\n            node.borderLeft = [];\n            node.borderRight = [];\n            for(var rank = node.minRank, maxRank = node.maxRank + 1; rank < maxRank; ++rank){\n                addBorderNode(g, 'borderLeft', '_bl', v, node, rank);\n                addBorderNode(g, 'borderRight', '_br', v, node, rank);\n            }\n        }\n    }\n    _lodashEs.forEach(g.children(), dfs);\n}\nfunction addBorderNode(g, prop, prefix, sg, sgNode, rank) {\n    var label = {\n        width: 0,\n        height: 0,\n        rank: rank,\n        borderType: prop\n    };\n    var prev = sgNode[prop][rank - 1];\n    var curr = _utilJs.addDummyNode(g, 'border', label, prefix);\n    sgNode[prop][rank] = curr;\n    g.setParent(curr, sg);\n    if (prev) g.setEdge(prev, curr, {\n        weight: 1\n    });\n}\n\n},{\"lodash-es\":\"h4a9d\",\"./util.js\":\"h7o6h\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"h7o6h\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"addDummyNode\", ()=>addDummyNode);\nparcelHelpers.export(exports, \"simplify\", ()=>simplify);\nparcelHelpers.export(exports, \"asNonCompoundGraph\", ()=>asNonCompoundGraph);\nparcelHelpers.export(exports, \"successorWeights\", ()=>successorWeights);\nparcelHelpers.export(exports, \"predecessorWeights\", ()=>predecessorWeights);\nparcelHelpers.export(exports, \"intersectRect\", ()=>intersectRect);\nparcelHelpers.export(exports, \"buildLayerMatrix\", ()=>buildLayerMatrix);\nparcelHelpers.export(exports, \"normalizeRanks\", ()=>normalizeRanks);\nparcelHelpers.export(exports, \"removeEmptyRanks\", ()=>removeEmptyRanks);\nparcelHelpers.export(exports, \"addBorderNode\", ()=>addBorderNode);\nparcelHelpers.export(exports, \"maxRank\", ()=>maxRank);\nparcelHelpers.export(exports, \"partition\", ()=>partition);\nparcelHelpers.export(exports, \"time\", ()=>time);\nparcelHelpers.export(exports, \"notime\", ()=>notime);\nvar _lodashEs = require(\"lodash-es\");\nvar _indexJs = require(\"../graphlib/index.js\");\n/*\n * Adds a dummy node to the graph and return v.\n */ function addDummyNode(g, type, attrs, name) {\n    var v;\n    do v = _lodashEs.uniqueId(name);\n    while (g.hasNode(v));\n    attrs.dummy = type;\n    g.setNode(v, attrs);\n    return v;\n}\n/*\n * Returns a new graph with only simple edges. Handles aggregation of data\n * associated with multi-edges.\n */ function simplify(g) {\n    var simplified = new (0, _indexJs.Graph)().setGraph(g.graph());\n    _lodashEs.forEach(g.nodes(), function(v) {\n        simplified.setNode(v, g.node(v));\n    });\n    _lodashEs.forEach(g.edges(), function(e) {\n        var simpleLabel = simplified.edge(e.v, e.w) || {\n            weight: 0,\n            minlen: 1\n        };\n        var label = g.edge(e);\n        simplified.setEdge(e.v, e.w, {\n            weight: simpleLabel.weight + label.weight,\n            minlen: Math.max(simpleLabel.minlen, label.minlen)\n        });\n    });\n    return simplified;\n}\nfunction asNonCompoundGraph(g) {\n    var simplified = new (0, _indexJs.Graph)({\n        multigraph: g.isMultigraph()\n    }).setGraph(g.graph());\n    _lodashEs.forEach(g.nodes(), function(v) {\n        if (!g.children(v).length) simplified.setNode(v, g.node(v));\n    });\n    _lodashEs.forEach(g.edges(), function(e) {\n        simplified.setEdge(e, g.edge(e));\n    });\n    return simplified;\n}\nfunction successorWeights(g) {\n    var weightMap = _lodashEs.map(g.nodes(), function(v) {\n        var sucs = {};\n        _lodashEs.forEach(g.outEdges(v), function(e) {\n            sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;\n        });\n        return sucs;\n    });\n    return _lodashEs.zipObject(g.nodes(), weightMap);\n}\nfunction predecessorWeights(g) {\n    var weightMap = _lodashEs.map(g.nodes(), function(v) {\n        var preds = {};\n        _lodashEs.forEach(g.inEdges(v), function(e) {\n            preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;\n        });\n        return preds;\n    });\n    return _lodashEs.zipObject(g.nodes(), weightMap);\n}\n/*\n * Finds where a line starting at point ({x, y}) would intersect a rectangle\n * ({x, y, width, height}) if it were pointing at the rectangle's center.\n */ function intersectRect(rect, point) {\n    var x = rect.x;\n    var y = rect.y;\n    // Rectangle intersection algorithm from:\n    // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n    var dx = point.x - x;\n    var dy = point.y - y;\n    var w = rect.width / 2;\n    var h = rect.height / 2;\n    if (!dx && !dy) throw new Error('Not possible to find intersection inside of the rectangle');\n    var sx, sy;\n    if (Math.abs(dy) * w > Math.abs(dx) * h) {\n        // Intersection is top or bottom of rect.\n        if (dy < 0) h = -h;\n        sx = h * dx / dy;\n        sy = h;\n    } else {\n        // Intersection is left or right of rect.\n        if (dx < 0) w = -w;\n        sx = w;\n        sy = w * dy / dx;\n    }\n    return {\n        x: x + sx,\n        y: y + sy\n    };\n}\n/*\n * Given a DAG with each node assigned \"rank\" and \"order\" properties, this\n * function will produce a matrix with the ids of each node.\n */ function buildLayerMatrix(g) {\n    var layering = _lodashEs.map(_lodashEs.range(maxRank(g) + 1), function() {\n        return [];\n    });\n    _lodashEs.forEach(g.nodes(), function(v) {\n        var node = g.node(v);\n        var rank = node.rank;\n        if (!_lodashEs.isUndefined(rank)) layering[rank][node.order] = v;\n    });\n    return layering;\n}\n/*\n * Adjusts the ranks for all nodes in the graph such that all nodes v have\n * rank(v) >= 0 and at least one node w has rank(w) = 0.\n */ function normalizeRanks(g) {\n    var min = _lodashEs.min(_lodashEs.map(g.nodes(), function(v) {\n        return g.node(v).rank;\n    }));\n    _lodashEs.forEach(g.nodes(), function(v) {\n        var node = g.node(v);\n        if (_lodashEs.has(node, 'rank')) node.rank -= min;\n    });\n}\nfunction removeEmptyRanks(g) {\n    // Ranks may not start at 0, so we need to offset them\n    var offset = _lodashEs.min(_lodashEs.map(g.nodes(), function(v) {\n        return g.node(v).rank;\n    }));\n    var layers = [];\n    _lodashEs.forEach(g.nodes(), function(v) {\n        var rank = g.node(v).rank - offset;\n        if (!layers[rank]) layers[rank] = [];\n        layers[rank].push(v);\n    });\n    var delta = 0;\n    var nodeRankFactor = g.graph().nodeRankFactor;\n    _lodashEs.forEach(layers, function(vs, i) {\n        if (_lodashEs.isUndefined(vs) && i % nodeRankFactor !== 0) --delta;\n        else if (delta) _lodashEs.forEach(vs, function(v) {\n            g.node(v).rank += delta;\n        });\n    });\n}\nfunction addBorderNode(g, prefix, rank, order) {\n    var node = {\n        width: 0,\n        height: 0\n    };\n    if (arguments.length >= 4) {\n        node.rank = rank;\n        node.order = order;\n    }\n    return addDummyNode(g, 'border', node, prefix);\n}\nfunction maxRank(g) {\n    return _lodashEs.max(_lodashEs.map(g.nodes(), function(v) {\n        var rank = g.node(v).rank;\n        if (!_lodashEs.isUndefined(rank)) return rank;\n    }));\n}\n/*\n * Partition a collection into two groups: `lhs` and `rhs`. If the supplied\n * function returns true for an entry it goes into `lhs`. Otherwise it goes\n * into `rhs.\n */ function partition(collection, fn) {\n    var result = {\n        lhs: [],\n        rhs: []\n    };\n    _lodashEs.forEach(collection, function(value) {\n        if (fn(value)) result.lhs.push(value);\n        else result.rhs.push(value);\n    });\n    return result;\n}\n/*\n * Returns a new function that wraps `fn` with a timer. The wrapper logs the\n * time it takes to execute the function.\n */ function time(name, fn) {\n    var start = _lodashEs.now();\n    try {\n        return fn();\n    } finally{\n        console.log(name + ' time: ' + (_lodashEs.now() - start) + 'ms');\n    }\n}\nfunction notime(name, fn) {\n    return fn();\n}\n\n},{\"lodash-es\":\"h4a9d\",\"../graphlib/index.js\":\"j6NXy\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"gOcH8\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"adjust\", ()=>adjust);\nparcelHelpers.export(exports, \"undo\", ()=>undo);\nvar _lodashEs = require(\"lodash-es\");\nfunction adjust(g) {\n    var rankDir = g.graph().rankdir.toLowerCase();\n    if (rankDir === 'lr' || rankDir === 'rl') swapWidthHeight(g);\n}\nfunction undo(g) {\n    var rankDir = g.graph().rankdir.toLowerCase();\n    if (rankDir === 'bt' || rankDir === 'rl') reverseY(g);\n    if (rankDir === 'lr' || rankDir === 'rl') {\n        swapXY(g);\n        swapWidthHeight(g);\n    }\n}\nfunction swapWidthHeight(g) {\n    _lodashEs.forEach(g.nodes(), function(v) {\n        swapWidthHeightOne(g.node(v));\n    });\n    _lodashEs.forEach(g.edges(), function(e) {\n        swapWidthHeightOne(g.edge(e));\n    });\n}\nfunction swapWidthHeightOne(attrs) {\n    var w = attrs.width;\n    attrs.width = attrs.height;\n    attrs.height = w;\n}\nfunction reverseY(g) {\n    _lodashEs.forEach(g.nodes(), function(v) {\n        reverseYOne(g.node(v));\n    });\n    _lodashEs.forEach(g.edges(), function(e) {\n        var edge = g.edge(e);\n        _lodashEs.forEach(edge.points, reverseYOne);\n        if (_lodashEs.has(edge, 'y')) reverseYOne(edge);\n    });\n}\nfunction reverseYOne(attrs) {\n    attrs.y = -attrs.y;\n}\nfunction swapXY(g) {\n    _lodashEs.forEach(g.nodes(), function(v) {\n        swapXYOne(g.node(v));\n    });\n    _lodashEs.forEach(g.edges(), function(e) {\n        var edge = g.edge(e);\n        _lodashEs.forEach(edge.points, swapXYOne);\n        if (_lodashEs.has(edge, 'x')) swapXYOne(edge);\n    });\n}\nfunction swapXYOne(attrs) {\n    var x = attrs.x;\n    attrs.x = attrs.y;\n    attrs.y = x;\n}\n\n},{\"lodash-es\":\"h4a9d\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"jEd9R\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"run\", ()=>run);\nparcelHelpers.export(exports, \"undo\", ()=>undo);\nvar _lodashEs = require(\"lodash-es\");\nvar _utilJs = require(\"./util.js\");\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */ function run(g) {\n    g.graph().dummyChains = [];\n    _lodashEs.forEach(g.edges(), function(edge) {\n        normalizeEdge(g, edge);\n    });\n}\nfunction normalizeEdge(g, e) {\n    var v = e.v;\n    var vRank = g.node(v).rank;\n    var w = e.w;\n    var wRank = g.node(w).rank;\n    var name = e.name;\n    var edgeLabel = g.edge(e);\n    var labelRank = edgeLabel.labelRank;\n    if (wRank === vRank + 1) return;\n    g.removeEdge(e);\n    var dummy, attrs, i;\n    for(i = 0, ++vRank; vRank < wRank; ++i, ++vRank){\n        edgeLabel.points = [];\n        attrs = {\n            width: 0,\n            height: 0,\n            edgeLabel: edgeLabel,\n            edgeObj: e,\n            rank: vRank\n        };\n        dummy = _utilJs.addDummyNode(g, 'edge', attrs, '_d');\n        if (vRank === labelRank) {\n            attrs.width = edgeLabel.width;\n            attrs.height = edgeLabel.height;\n            // @ts-expect-error\n            attrs.dummy = 'edge-label';\n            // @ts-expect-error\n            attrs.labelpos = edgeLabel.labelpos;\n        }\n        g.setEdge(v, dummy, {\n            weight: edgeLabel.weight\n        }, name);\n        if (i === 0) g.graph().dummyChains.push(dummy);\n        v = dummy;\n    }\n    g.setEdge(v, w, {\n        weight: edgeLabel.weight\n    }, name);\n}\nfunction undo(g) {\n    _lodashEs.forEach(g.graph().dummyChains, function(v) {\n        var node = g.node(v);\n        var origLabel = node.edgeLabel;\n        var w;\n        g.setEdge(node.edgeObj, origLabel);\n        while(node.dummy){\n            w = g.successors(v)[0];\n            g.removeNode(v);\n            origLabel.points.push({\n                x: node.x,\n                y: node.y\n            });\n            if (node.dummy === 'edge-label') {\n                origLabel.x = node.x;\n                origLabel.y = node.y;\n                origLabel.width = node.width;\n                origLabel.height = node.height;\n            }\n            v = w;\n            node = g.node(v);\n        }\n    });\n}\n\n},{\"lodash-es\":\"h4a9d\",\"./util.js\":\"h7o6h\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"7Hj7F\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"rank\", ()=>rank);\nvar _feasibleTreeJs = require(\"./feasible-tree.js\");\nvar _networkSimplexJs = require(\"./network-simplex.js\");\nvar _utilJs = require(\"./util.js\");\n/*\n * Assigns a rank to each node in the input graph that respects the \"minlen\"\n * constraint specified on edges between nodes.\n *\n * This basic structure is derived from Gansner, et al., \"A Technique for\n * Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a connected DAG\n *    2. Graph nodes must be objects\n *    3. Graph edges must have \"weight\" and \"minlen\" attributes\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have a \"rank\" attribute based on the results of the\n *       algorithm. Ranks can start at any index (including negative), we'll\n *       fix them up later.\n */ function rank(g) {\n    switch(g.graph().ranker){\n        case 'network-simplex':\n            networkSimplexRanker(g);\n            break;\n        case 'tight-tree':\n            tightTreeRanker(g);\n            break;\n        case 'longest-path':\n            longestPathRanker(g);\n            break;\n        default:\n            networkSimplexRanker(g);\n    }\n}\n// A fast and simple ranker, but results are far from optimal.\nvar longestPathRanker = (0, _utilJs.longestPath);\nfunction tightTreeRanker(g) {\n    (0, _utilJs.longestPath)(g);\n    (0, _feasibleTreeJs.feasibleTree)(g);\n}\nfunction networkSimplexRanker(g) {\n    (0, _networkSimplexJs.networkSimplex)(g);\n}\n\n},{\"./feasible-tree.js\":\"eFW3K\",\"./network-simplex.js\":\"eE4Ic\",\"./util.js\":\"j4kYr\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"eFW3K\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"feasibleTree\", ()=>feasibleTree);\nvar _lodashEs = require(\"lodash-es\");\nvar _indexJs = require(\"../../graphlib/index.js\");\nvar _utilJs = require(\"./util.js\");\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */ function feasibleTree(g) {\n    var t = new (0, _indexJs.Graph)({\n        directed: false\n    });\n    // Choose arbitrary node from which to start our tree\n    var start = g.nodes()[0];\n    var size = g.nodeCount();\n    t.setNode(start, {});\n    var edge, delta;\n    while(tightTree(t, g) < size){\n        edge = findMinSlackEdge(t, g);\n        delta = t.hasNode(edge.v) ? (0, _utilJs.slack)(g, edge) : -(0, _utilJs.slack)(g, edge);\n        shiftRanks(t, g, delta);\n    }\n    return t;\n}\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */ function tightTree(t, g) {\n    function dfs(v) {\n        _lodashEs.forEach(g.nodeEdges(v), function(e) {\n            var edgeV = e.v, w = v === edgeV ? e.w : edgeV;\n            if (!t.hasNode(w) && !(0, _utilJs.slack)(g, e)) {\n                t.setNode(w, {});\n                t.setEdge(v, w, {});\n                dfs(w);\n            }\n        });\n    }\n    _lodashEs.forEach(t.nodes(), dfs);\n    return t.nodeCount();\n}\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */ function findMinSlackEdge(t, g) {\n    return _lodashEs.minBy(g.edges(), function(e) {\n        if (t.hasNode(e.v) !== t.hasNode(e.w)) return (0, _utilJs.slack)(g, e);\n    });\n}\nfunction shiftRanks(t, g, delta) {\n    _lodashEs.forEach(t.nodes(), function(v) {\n        g.node(v).rank += delta;\n    });\n}\n\n},{\"lodash-es\":\"h4a9d\",\"../../graphlib/index.js\":\"j6NXy\",\"./util.js\":\"j4kYr\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"j4kYr\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"longestPath\", ()=>longestPath);\nparcelHelpers.export(exports, \"slack\", ()=>slack);\nvar _lodashEs = require(\"lodash-es\");\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */ function longestPath(g) {\n    var visited = {};\n    function dfs(v) {\n        var label = g.node(v);\n        if (_lodashEs.has(visited, v)) return label.rank;\n        visited[v] = true;\n        var rank = _lodashEs.min(_lodashEs.map(g.outEdges(v), function(e) {\n            return dfs(e.w) - g.edge(e).minlen;\n        }));\n        if (rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\n        rank === undefined || // return value of _.map([]) for Lodash 4\n        rank === null) // return value of _.map([null])\n        rank = 0;\n        return label.rank = rank;\n    }\n    _lodashEs.forEach(g.sources(), dfs);\n}\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */ function slack(g, e) {\n    return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}\n\n},{\"lodash-es\":\"h4a9d\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"eE4Ic\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"networkSimplex\", ()=>networkSimplex);\nvar _lodashEs = require(\"lodash-es\");\nvar _indexJs = require(\"../../graphlib/alg/index.js\");\nvar _utilJs = require(\"../util.js\");\nvar _feasibleTreeJs = require(\"./feasible-tree.js\");\nvar _utilJs1 = require(\"./util.js\");\n// Expose some internals for testing purposes\nnetworkSimplex.initLowLimValues = initLowLimValues;\nnetworkSimplex.initCutValues = initCutValues;\nnetworkSimplex.calcCutValue = calcCutValue;\nnetworkSimplex.leaveEdge = leaveEdge;\nnetworkSimplex.enterEdge = enterEdge;\nnetworkSimplex.exchangeEdges = exchangeEdges;\n/*\n * The network simplex algorithm assigns ranks to each node in the input graph\n * and iteratively improves the ranking to reduce the length of edges.\n *\n * Preconditions:\n *\n *    1. The input graph must be a DAG.\n *    2. All nodes in the graph must have an object value.\n *    3. All edges in the graph must have \"minlen\" and \"weight\" attributes.\n *\n * Postconditions:\n *\n *    1. All nodes in the graph will have an assigned \"rank\" attribute that has\n *       been optimized by the network simplex algorithm. Ranks start at 0.\n *\n *\n * A rough sketch of the algorithm is as follows:\n *\n *    1. Assign initial ranks to each node. We use the longest path algorithm,\n *       which assigns ranks to the lowest position possible. In general this\n *       leads to very wide bottom ranks and unnecessarily long edges.\n *    2. Construct a feasible tight tree. A tight tree is one such that all\n *       edges in the tree have no slack (difference between length of edge\n *       and minlen for the edge). This by itself greatly improves the assigned\n *       rankings by shorting edges.\n *    3. Iteratively find edges that have negative cut values. Generally a\n *       negative cut value indicates that the edge could be removed and a new\n *       tree edge could be added to produce a more compact graph.\n *\n * Much of the algorithms here are derived from Gansner, et al., \"A Technique\n * for Drawing Directed Graphs.\" The structure of the file roughly follows the\n * structure of the overall algorithm.\n */ function networkSimplex(g) {\n    g = (0, _utilJs.simplify)(g);\n    (0, _utilJs1.longestPath)(g);\n    var t = (0, _feasibleTreeJs.feasibleTree)(g);\n    initLowLimValues(t);\n    initCutValues(t, g);\n    var e, f;\n    while(e = leaveEdge(t)){\n        f = enterEdge(t, g, e);\n        exchangeEdges(t, g, e, f);\n    }\n}\n/*\n * Initializes cut values for all edges in the tree.\n */ function initCutValues(t, g) {\n    var vs = _indexJs.postorder(t, t.nodes());\n    vs = vs.slice(0, vs.length - 1);\n    _lodashEs.forEach(vs, function(v) {\n        assignCutValue(t, g, v);\n    });\n}\nfunction assignCutValue(t, g, child) {\n    var childLab = t.node(child);\n    var parent = childLab.parent;\n    t.edge(child, parent).cutvalue = calcCutValue(t, g, child);\n}\n/*\n * Given the tight tree, its graph, and a child in the graph calculate and\n * return the cut value for the edge between the child and its parent.\n */ function calcCutValue(t, g, child) {\n    var childLab = t.node(child);\n    var parent = childLab.parent;\n    // True if the child is on the tail end of the edge in the directed graph\n    var childIsTail = true;\n    // The graph's view of the tree edge we're inspecting\n    var graphEdge = g.edge(child, parent);\n    // The accumulated cut value for the edge between this node and its parent\n    var cutValue = 0;\n    if (!graphEdge) {\n        childIsTail = false;\n        graphEdge = g.edge(parent, child);\n    }\n    cutValue = graphEdge.weight;\n    _lodashEs.forEach(g.nodeEdges(child), function(e) {\n        var isOutEdge = e.v === child, other = isOutEdge ? e.w : e.v;\n        if (other !== parent) {\n            var pointsToHead = isOutEdge === childIsTail, otherWeight = g.edge(e).weight;\n            cutValue += pointsToHead ? otherWeight : -otherWeight;\n            if (isTreeEdge(t, child, other)) {\n                var otherCutValue = t.edge(child, other).cutvalue;\n                cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n            }\n        }\n    });\n    return cutValue;\n}\nfunction initLowLimValues(tree, root) {\n    if (arguments.length < 2) root = tree.nodes()[0];\n    dfsAssignLowLim(tree, {}, 1, root);\n}\nfunction dfsAssignLowLim(tree, visited, nextLim, v, parent) {\n    var low = nextLim;\n    var label = tree.node(v);\n    visited[v] = true;\n    _lodashEs.forEach(tree.neighbors(v), function(w) {\n        if (!_lodashEs.has(visited, w)) nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);\n    });\n    label.low = low;\n    label.lim = nextLim++;\n    if (parent) label.parent = parent;\n    else // TODO should be able to remove this when we incrementally update low lim\n    delete label.parent;\n    return nextLim;\n}\nfunction leaveEdge(tree) {\n    return _lodashEs.find(tree.edges(), function(e) {\n        return tree.edge(e).cutvalue < 0;\n    });\n}\nfunction enterEdge(t, g, edge) {\n    var v = edge.v;\n    var w = edge.w;\n    // For the rest of this function we assume that v is the tail and w is the\n    // head, so if we don't have this edge in the graph we should flip it to\n    // match the correct orientation.\n    if (!g.hasEdge(v, w)) {\n        v = edge.w;\n        w = edge.v;\n    }\n    var vLabel = t.node(v);\n    var wLabel = t.node(w);\n    var tailLabel = vLabel;\n    var flip = false;\n    // If the root is in the tail of the edge then we need to flip the logic that\n    // checks for the head and tail nodes in the candidates function below.\n    if (vLabel.lim > wLabel.lim) {\n        tailLabel = wLabel;\n        flip = true;\n    }\n    var candidates = _lodashEs.filter(g.edges(), function(edge) {\n        return flip === isDescendant(t, t.node(edge.v), tailLabel) && flip !== isDescendant(t, t.node(edge.w), tailLabel);\n    });\n    return _lodashEs.minBy(candidates, function(edge) {\n        return (0, _utilJs1.slack)(g, edge);\n    });\n}\nfunction exchangeEdges(t, g, e, f) {\n    var v = e.v;\n    var w = e.w;\n    t.removeEdge(v, w);\n    t.setEdge(f.v, f.w, {});\n    initLowLimValues(t);\n    initCutValues(t, g);\n    updateRanks(t, g);\n}\nfunction updateRanks(t, g) {\n    var root = _lodashEs.find(t.nodes(), function(v) {\n        return !g.node(v).parent;\n    });\n    var vs = _indexJs.preorder(t, root);\n    vs = vs.slice(1);\n    _lodashEs.forEach(vs, function(v) {\n        var parent = t.node(v).parent, edge = g.edge(v, parent), flipped = false;\n        if (!edge) {\n            edge = g.edge(parent, v);\n            flipped = true;\n        }\n        g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);\n    });\n}\n/*\n * Returns true if the edge is in the tree.\n */ function isTreeEdge(tree, u, v) {\n    return tree.hasEdge(u, v);\n}\n/*\n * Returns true if the specified node is descendant of the root node per the\n * assigned low and lim attributes in the tree.\n */ function isDescendant(tree, vLabel, rootLabel) {\n    return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;\n}\n\n},{\"lodash-es\":\"h4a9d\",\"../../graphlib/alg/index.js\":\"aHzdt\",\"../util.js\":\"h7o6h\",\"./feasible-tree.js\":\"eFW3K\",\"./util.js\":\"j4kYr\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"aHzdt\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"components\", ()=>(0, _componentsJs.components));\nparcelHelpers.export(exports, \"dijkstra\", ()=>(0, _dijkstraJs.dijkstra));\nparcelHelpers.export(exports, \"dijkstraAll\", ()=>(0, _dijkstraAllJs.dijkstraAll));\nparcelHelpers.export(exports, \"findCycles\", ()=>(0, _findCyclesJs.findCycles));\nparcelHelpers.export(exports, \"floydWarshall\", ()=>(0, _floydWarshallJs.floydWarshall));\nparcelHelpers.export(exports, \"isAcyclic\", ()=>(0, _isAcyclicJs.isAcyclic));\nparcelHelpers.export(exports, \"postorder\", ()=>(0, _postorderJs.postorder));\nparcelHelpers.export(exports, \"preorder\", ()=>(0, _preorderJs.preorder));\nparcelHelpers.export(exports, \"prim\", ()=>(0, _primJs.prim));\nparcelHelpers.export(exports, \"tarjan\", ()=>(0, _tarjanJs.tarjan));\nparcelHelpers.export(exports, \"topsort\", ()=>(0, _topsortJs.topsort));\nvar _componentsJs = require(\"./components.js\");\nvar _dijkstraJs = require(\"./dijkstra.js\");\nvar _dijkstraAllJs = require(\"./dijkstra-all.js\");\nvar _findCyclesJs = require(\"./find-cycles.js\");\nvar _floydWarshallJs = require(\"./floyd-warshall.js\");\nvar _isAcyclicJs = require(\"./is-acyclic.js\");\nvar _postorderJs = require(\"./postorder.js\");\nvar _preorderJs = require(\"./preorder.js\");\nvar _primJs = require(\"./prim.js\");\nvar _tarjanJs = require(\"./tarjan.js\");\nvar _topsortJs = require(\"./topsort.js\");\n\n},{\"./components.js\":\"5k0A8\",\"./dijkstra.js\":\"hQjpk\",\"./dijkstra-all.js\":\"44OU9\",\"./find-cycles.js\":\"jzdBq\",\"./floyd-warshall.js\":\"4B5Kc\",\"./is-acyclic.js\":\"a2q6P\",\"./postorder.js\":\"2NZTW\",\"./preorder.js\":\"kUjCq\",\"./prim.js\":\"5TnwK\",\"./tarjan.js\":\"Zez6P\",\"./topsort.js\":\"jPX5R\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"5k0A8\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"components\", ()=>components);\nvar _lodashEs = require(\"lodash-es\");\nfunction components(g) {\n    var visited = {};\n    var cmpts = [];\n    var cmpt;\n    function dfs(v) {\n        if (_lodashEs.has(visited, v)) return;\n        visited[v] = true;\n        cmpt.push(v);\n        _lodashEs.each(g.successors(v), dfs);\n        _lodashEs.each(g.predecessors(v), dfs);\n    }\n    _lodashEs.each(g.nodes(), function(v) {\n        cmpt = [];\n        dfs(v);\n        if (cmpt.length) cmpts.push(cmpt);\n    });\n    return cmpts;\n}\n\n},{\"lodash-es\":\"h4a9d\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"hQjpk\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"dijkstra\", ()=>dijkstra);\nvar _lodashEs = require(\"lodash-es\");\nvar _priorityQueueJs = require(\"../data/priority-queue.js\");\nvar DEFAULT_WEIGHT_FUNC = _lodashEs.constant(1);\nfunction dijkstra(g, source, weightFn, edgeFn) {\n    return runDijkstra(g, String(source), weightFn || DEFAULT_WEIGHT_FUNC, edgeFn || function(v) {\n        return g.outEdges(v);\n    });\n}\nfunction runDijkstra(g, source, weightFn, edgeFn) {\n    var results = {};\n    var pq = new (0, _priorityQueueJs.PriorityQueue)();\n    var v, vEntry;\n    var updateNeighbors = function(edge) {\n        var w = edge.v !== v ? edge.v : edge.w;\n        var wEntry = results[w];\n        var weight = weightFn(edge);\n        var distance = vEntry.distance + weight;\n        if (weight < 0) throw new Error(\"dijkstra does not allow negative edge weights. Bad edge: \" + edge + ' Weight: ' + weight);\n        if (distance < wEntry.distance) {\n            wEntry.distance = distance;\n            wEntry.predecessor = v;\n            pq.decrease(w, distance);\n        }\n    };\n    g.nodes().forEach(function(v) {\n        var distance = v === source ? 0 : Number.POSITIVE_INFINITY;\n        results[v] = {\n            distance: distance\n        };\n        pq.add(v, distance);\n    });\n    while(pq.size() > 0){\n        v = pq.removeMin();\n        vEntry = results[v];\n        if (vEntry.distance === Number.POSITIVE_INFINITY) break;\n        edgeFn(v).forEach(updateNeighbors);\n    }\n    return results;\n}\n\n},{\"lodash-es\":\"h4a9d\",\"../data/priority-queue.js\":\"uWIb2\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"uWIb2\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"PriorityQueue\", ()=>PriorityQueue);\nvar _lodashEs = require(\"lodash-es\");\n/**\n * A min-priority queue data structure. This algorithm is derived from Cormen,\n * et al., \"Introduction to Algorithms\". The basic idea of a min-priority\n * queue is that you can efficiently (in O(1) time) get the smallest key in\n * the queue. Adding and removing elements takes O(log n) time. A key can\n * have its priority decreased in O(log n) time.\n */ class PriorityQueue {\n    constructor(){\n        this._arr = [];\n        this._keyIndices = {};\n    }\n    /**\n   * Returns the number of elements in the queue. Takes `O(1)` time.\n   */ size() {\n        return this._arr.length;\n    }\n    /**\n   * Returns the keys that are in the queue. Takes `O(n)` time.\n   */ keys() {\n        return this._arr.map(function(x) {\n            return x.key;\n        });\n    }\n    /**\n   * Returns `true` if **key** is in the queue and `false` if not.\n   */ has(key) {\n        return _lodashEs.has(this._keyIndices, key);\n    }\n    /**\n   * Returns the priority for **key**. If **key** is not present in the queue\n   * then this function returns `undefined`. Takes `O(1)` time.\n   *\n   * @param {Object} key\n   */ priority(key) {\n        var index = this._keyIndices[key];\n        if (index !== undefined) return this._arr[index].priority;\n    }\n    /**\n   * Returns the key for the minimum element in this queue. If the queue is\n   * empty this function throws an Error. Takes `O(1)` time.\n   */ min() {\n        if (this.size() === 0) throw new Error('Queue underflow');\n        return this._arr[0].key;\n    }\n    /**\n   * Inserts a new key into the priority queue. If the key already exists in\n   * the queue this function returns `false`; otherwise it will return `true`.\n   * Takes `O(n)` time.\n   *\n   * @param {Object} key the key to add\n   * @param {Number} priority the initial priority for the key\n   */ add(key, priority) {\n        var keyIndices = this._keyIndices;\n        key = String(key);\n        if (!_lodashEs.has(keyIndices, key)) {\n            var arr = this._arr;\n            var index = arr.length;\n            keyIndices[key] = index;\n            arr.push({\n                key: key,\n                priority: priority\n            });\n            this._decrease(index);\n            return true;\n        }\n        return false;\n    }\n    /**\n   * Removes and returns the smallest key in the queue. Takes `O(log n)` time.\n   */ removeMin() {\n        this._swap(0, this._arr.length - 1);\n        var min = this._arr.pop();\n        delete this._keyIndices[min.key];\n        this._heapify(0);\n        return min.key;\n    }\n    /**\n   * Decreases the priority for **key** to **priority**. If the new priority is\n   * greater than the previous priority, this function will throw an Error.\n   *\n   * @param {Object} key the key for which to raise priority\n   * @param {Number} priority the new priority for the key\n   */ decrease(key, priority) {\n        var index = this._keyIndices[key];\n        if (priority > this._arr[index].priority) throw new Error(\"New priority is greater than current priority. Key: \" + key + ' Old: ' + this._arr[index].priority + ' New: ' + priority);\n        this._arr[index].priority = priority;\n        this._decrease(index);\n    }\n    _heapify(i) {\n        var arr = this._arr;\n        var l = 2 * i;\n        var r = l + 1;\n        var largest = i;\n        if (l < arr.length) {\n            largest = arr[l].priority < arr[largest].priority ? l : largest;\n            if (r < arr.length) largest = arr[r].priority < arr[largest].priority ? r : largest;\n            if (largest !== i) {\n                this._swap(i, largest);\n                this._heapify(largest);\n            }\n        }\n    }\n    _decrease(index) {\n        var arr = this._arr;\n        var priority = arr[index].priority;\n        var parent;\n        while(index !== 0){\n            parent = index >> 1;\n            if (arr[parent].priority < priority) break;\n            this._swap(index, parent);\n            index = parent;\n        }\n    }\n    _swap(i, j) {\n        var arr = this._arr;\n        var keyIndices = this._keyIndices;\n        var origArrI = arr[i];\n        var origArrJ = arr[j];\n        arr[i] = origArrJ;\n        arr[j] = origArrI;\n        keyIndices[origArrJ.key] = i;\n        keyIndices[origArrI.key] = j;\n    }\n}\n\n},{\"lodash-es\":\"h4a9d\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"44OU9\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"dijkstraAll\", ()=>dijkstraAll);\nvar _lodashEs = require(\"lodash-es\");\nvar _dijkstraJs = require(\"./dijkstra.js\");\nfunction dijkstraAll(g, weightFunc, edgeFunc) {\n    return _lodashEs.transform(g.nodes(), function(acc, v) {\n        acc[v] = (0, _dijkstraJs.dijkstra)(g, v, weightFunc, edgeFunc);\n    }, {});\n}\n\n},{\"lodash-es\":\"h4a9d\",\"./dijkstra.js\":\"hQjpk\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"jzdBq\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"findCycles\", ()=>findCycles);\nvar _lodashEs = require(\"lodash-es\");\nvar _tarjanJs = require(\"./tarjan.js\");\nfunction findCycles(g) {\n    return _lodashEs.filter((0, _tarjanJs.tarjan)(g), function(cmpt) {\n        return cmpt.length > 1 || cmpt.length === 1 && g.hasEdge(cmpt[0], cmpt[0]);\n    });\n}\n\n},{\"lodash-es\":\"h4a9d\",\"./tarjan.js\":\"Zez6P\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"Zez6P\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"tarjan\", ()=>tarjan);\nvar _lodashEs = require(\"lodash-es\");\nfunction tarjan(g) {\n    var index = 0;\n    var stack = [];\n    var visited = {}; // node id -> { onStack, lowlink, index }\n    var results = [];\n    function dfs(v) {\n        var entry = visited[v] = {\n            onStack: true,\n            lowlink: index,\n            index: index++\n        };\n        stack.push(v);\n        g.successors(v).forEach(function(w) {\n            if (!_lodashEs.has(visited, w)) {\n                dfs(w);\n                entry.lowlink = Math.min(entry.lowlink, visited[w].lowlink);\n            } else if (visited[w].onStack) entry.lowlink = Math.min(entry.lowlink, visited[w].index);\n        });\n        if (entry.lowlink === entry.index) {\n            var cmpt = [];\n            var w;\n            do {\n                w = stack.pop();\n                visited[w].onStack = false;\n                cmpt.push(w);\n            }while (v !== w);\n            results.push(cmpt);\n        }\n    }\n    g.nodes().forEach(function(v) {\n        if (!_lodashEs.has(visited, v)) dfs(v);\n    });\n    return results;\n}\n\n},{\"lodash-es\":\"h4a9d\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"4B5Kc\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"floydWarshall\", ()=>floydWarshall);\nvar _lodashEs = require(\"lodash-es\");\nvar DEFAULT_WEIGHT_FUNC = _lodashEs.constant(1);\nfunction floydWarshall(g, weightFn, edgeFn) {\n    return runFloydWarshall(g, weightFn || DEFAULT_WEIGHT_FUNC, edgeFn || function(v) {\n        return g.outEdges(v);\n    });\n}\nfunction runFloydWarshall(g, weightFn, edgeFn) {\n    var results = {};\n    var nodes = g.nodes();\n    nodes.forEach(function(v) {\n        results[v] = {};\n        results[v][v] = {\n            distance: 0\n        };\n        nodes.forEach(function(w) {\n            if (v !== w) results[v][w] = {\n                distance: Number.POSITIVE_INFINITY\n            };\n        });\n        edgeFn(v).forEach(function(edge) {\n            var w = edge.v === v ? edge.w : edge.v;\n            var d = weightFn(edge);\n            results[v][w] = {\n                distance: d,\n                predecessor: v\n            };\n        });\n    });\n    nodes.forEach(function(k) {\n        var rowK = results[k];\n        nodes.forEach(function(i) {\n            var rowI = results[i];\n            nodes.forEach(function(j) {\n                var ik = rowI[k];\n                var kj = rowK[j];\n                var ij = rowI[j];\n                var altDistance = ik.distance + kj.distance;\n                if (altDistance < ij.distance) {\n                    ij.distance = altDistance;\n                    ij.predecessor = kj.predecessor;\n                }\n            });\n        });\n    });\n    return results;\n}\n\n},{\"lodash-es\":\"h4a9d\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"a2q6P\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"isAcyclic\", ()=>isAcyclic);\nvar _topsortJs = require(\"./topsort.js\");\nfunction isAcyclic(g) {\n    try {\n        (0, _topsortJs.topsort)(g);\n    } catch (e) {\n        if (e instanceof (0, _topsortJs.CycleException)) return false;\n        throw e;\n    }\n    return true;\n}\n\n},{\"./topsort.js\":\"jPX5R\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"jPX5R\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"topsort\", ()=>topsort);\nparcelHelpers.export(exports, \"CycleException\", ()=>CycleException);\nvar _lodashEs = require(\"lodash-es\");\ntopsort.CycleException = CycleException;\nfunction topsort(g) {\n    var visited = {};\n    var stack = {};\n    var results = [];\n    function visit(node) {\n        if (_lodashEs.has(stack, node)) throw new CycleException();\n        if (!_lodashEs.has(visited, node)) {\n            stack[node] = true;\n            visited[node] = true;\n            _lodashEs.each(g.predecessors(node), visit);\n            delete stack[node];\n            results.push(node);\n        }\n    }\n    _lodashEs.each(g.sinks(), visit);\n    if (_lodashEs.size(visited) !== g.nodeCount()) throw new CycleException();\n    return results;\n}\nfunction CycleException() {}\nCycleException.prototype = new Error(); // must be an instance of Error to pass testing\n\n},{\"lodash-es\":\"h4a9d\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"2NZTW\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"postorder\", ()=>postorder);\nvar _dfsJs = require(\"./dfs.js\");\nfunction postorder(g, vs) {\n    return (0, _dfsJs.dfs)(g, vs, 'post');\n}\n\n},{\"./dfs.js\":\"cchz1\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"cchz1\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"dfs\", ()=>dfs);\nvar _lodashEs = require(\"lodash-es\");\n/*\n * A helper that preforms a pre- or post-order traversal on the input graph\n * and returns the nodes in the order they were visited. If the graph is\n * undirected then this algorithm will navigate using neighbors. If the graph\n * is directed then this algorithm will navigate using successors.\n *\n * Order must be one of \"pre\" or \"post\".\n */ function dfs(g, vs, order) {\n    if (!_lodashEs.isArray(vs)) vs = [\n        vs\n    ];\n    var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);\n    var acc = [];\n    var visited = {};\n    _lodashEs.each(vs, function(v) {\n        if (!g.hasNode(v)) throw new Error('Graph does not have node: ' + v);\n        doDfs(g, v, order === 'post', visited, navigation, acc);\n    });\n    return acc;\n}\nfunction doDfs(g, v, postorder, visited, navigation, acc) {\n    if (!_lodashEs.has(visited, v)) {\n        visited[v] = true;\n        if (!postorder) acc.push(v);\n        _lodashEs.each(navigation(v), function(w) {\n            doDfs(g, w, postorder, visited, navigation, acc);\n        });\n        if (postorder) acc.push(v);\n    }\n}\n\n},{\"lodash-es\":\"h4a9d\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"kUjCq\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"preorder\", ()=>preorder);\nvar _dfsJs = require(\"./dfs.js\");\nfunction preorder(g, vs) {\n    return (0, _dfsJs.dfs)(g, vs, 'pre');\n}\n\n},{\"./dfs.js\":\"cchz1\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"5TnwK\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"prim\", ()=>prim);\nvar _lodashEs = require(\"lodash-es\");\nvar _priorityQueueJs = require(\"../data/priority-queue.js\");\nvar _graphJs = require(\"../graph.js\");\nfunction prim(g, weightFunc) {\n    var result = new (0, _graphJs.Graph)();\n    var parents = {};\n    var pq = new (0, _priorityQueueJs.PriorityQueue)();\n    var v;\n    function updateNeighbors(edge) {\n        var w = edge.v === v ? edge.w : edge.v;\n        var pri = pq.priority(w);\n        if (pri !== undefined) {\n            var edgeWeight = weightFunc(edge);\n            if (edgeWeight < pri) {\n                parents[w] = v;\n                pq.decrease(w, edgeWeight);\n            }\n        }\n    }\n    if (g.nodeCount() === 0) return result;\n    _lodashEs.each(g.nodes(), function(v) {\n        pq.add(v, Number.POSITIVE_INFINITY);\n        result.setNode(v);\n    });\n    // Start from an arbitrary node\n    pq.decrease(g.nodes()[0], 0);\n    var init = false;\n    while(pq.size() > 0){\n        v = pq.removeMin();\n        if (_lodashEs.has(parents, v)) result.setEdge(v, parents[v]);\n        else if (init) throw new Error('Input graph is not connected: ' + g);\n        else init = true;\n        g.nodeEdges(v).forEach(updateNeighbors);\n    }\n    return result;\n}\n\n},{\"lodash-es\":\"h4a9d\",\"../data/priority-queue.js\":\"uWIb2\",\"../graph.js\":\"84V0B\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"cCWnA\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"run\", ()=>run);\nparcelHelpers.export(exports, \"cleanup\", ()=>cleanup);\nvar _lodashEs = require(\"lodash-es\");\nvar _utilJs = require(\"./util.js\");\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */ function run(g) {\n    var root = _utilJs.addDummyNode(g, 'root', {}, '_root');\n    var depths = treeDepths(g);\n    var height = _lodashEs.max(_lodashEs.values(depths)) - 1; // Note: depths is an Object not an array\n    var nodeSep = 2 * height + 1;\n    g.graph().nestingRoot = root;\n    // Multiply minlen by nodeSep to align nodes on non-border ranks.\n    _lodashEs.forEach(g.edges(), function(e) {\n        g.edge(e).minlen *= nodeSep;\n    });\n    // Calculate a weight that is sufficient to keep subgraphs vertically compact\n    var weight = sumWeights(g) + 1;\n    // Create border nodes and link them up\n    _lodashEs.forEach(g.children(), function(child) {\n        dfs(g, root, nodeSep, weight, height, depths, child);\n    });\n    // Save the multiplier for node layers for later removal of empty border\n    // layers.\n    g.graph().nodeRankFactor = nodeSep;\n}\nfunction dfs(g, root, nodeSep, weight, height, depths, v) {\n    var children = g.children(v);\n    if (!children.length) {\n        if (v !== root) g.setEdge(root, v, {\n            weight: 0,\n            minlen: nodeSep\n        });\n        return;\n    }\n    var top = _utilJs.addBorderNode(g, '_bt');\n    var bottom = _utilJs.addBorderNode(g, '_bb');\n    var label = g.node(v);\n    g.setParent(top, v);\n    label.borderTop = top;\n    g.setParent(bottom, v);\n    label.borderBottom = bottom;\n    _lodashEs.forEach(children, function(child) {\n        dfs(g, root, nodeSep, weight, height, depths, child);\n        var childNode = g.node(child);\n        var childTop = childNode.borderTop ? childNode.borderTop : child;\n        var childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n        var thisWeight = childNode.borderTop ? weight : 2 * weight;\n        var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n        g.setEdge(top, childTop, {\n            weight: thisWeight,\n            minlen: minlen,\n            nestingEdge: true\n        });\n        g.setEdge(childBottom, bottom, {\n            weight: thisWeight,\n            minlen: minlen,\n            nestingEdge: true\n        });\n    });\n    if (!g.parent(v)) g.setEdge(root, top, {\n        weight: 0,\n        minlen: height + depths[v]\n    });\n}\nfunction treeDepths(g) {\n    var depths = {};\n    function dfs(v, depth) {\n        var children = g.children(v);\n        if (children && children.length) _lodashEs.forEach(children, function(child) {\n            dfs(child, depth + 1);\n        });\n        depths[v] = depth;\n    }\n    _lodashEs.forEach(g.children(), function(v) {\n        dfs(v, 1);\n    });\n    return depths;\n}\nfunction sumWeights(g) {\n    return _lodashEs.reduce(g.edges(), function(acc, e) {\n        return acc + g.edge(e).weight;\n    }, 0);\n}\nfunction cleanup(g) {\n    var graphLabel = g.graph();\n    g.removeNode(graphLabel.nestingRoot);\n    delete graphLabel.nestingRoot;\n    _lodashEs.forEach(g.edges(), function(e) {\n        var edge = g.edge(e);\n        if (edge.nestingEdge) g.removeEdge(e);\n    });\n}\n\n},{\"lodash-es\":\"h4a9d\",\"./util.js\":\"h7o6h\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"bIgS9\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"order\", ()=>order);\nvar _lodashEs = require(\"lodash-es\");\nvar _indexJs = require(\"../../graphlib/index.js\");\nvar _utilJs = require(\"../util.js\");\nvar _addSubgraphConstraintsJs = require(\"./add-subgraph-constraints.js\");\nvar _buildLayerGraphJs = require(\"./build-layer-graph.js\");\nvar _crossCountJs = require(\"./cross-count.js\");\nvar _initOrderJs = require(\"./init-order.js\");\nvar _sortSubgraphJs = require(\"./sort-subgraph.js\");\n/*\n * Applies heuristics to minimize edge crossings in the graph and sets the best\n * order solution as an order attribute on each node.\n *\n * Pre-conditions:\n *\n *    1. Graph must be DAG\n *    2. Graph nodes must be objects with a \"rank\" attribute\n *    3. Graph edges must have the \"weight\" attribute\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\n *       algorithm.\n */ function order(g) {\n    var maxRank = _utilJs.maxRank(g), downLayerGraphs = buildLayerGraphs(g, _lodashEs.range(1, maxRank + 1), 'inEdges'), upLayerGraphs = buildLayerGraphs(g, _lodashEs.range(maxRank - 1, -1, -1), 'outEdges');\n    var layering = (0, _initOrderJs.initOrder)(g);\n    assignOrder(g, layering);\n    var bestCC = Number.POSITIVE_INFINITY, best;\n    for(var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest){\n        sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);\n        layering = _utilJs.buildLayerMatrix(g);\n        var cc = (0, _crossCountJs.crossCount)(g, layering);\n        if (cc < bestCC) {\n            lastBest = 0;\n            best = _lodashEs.cloneDeep(layering);\n            bestCC = cc;\n        }\n    }\n    assignOrder(g, best);\n}\nfunction buildLayerGraphs(g, ranks, relationship) {\n    return _lodashEs.map(ranks, function(rank) {\n        return (0, _buildLayerGraphJs.buildLayerGraph)(g, rank, relationship);\n    });\n}\nfunction sweepLayerGraphs(layerGraphs, biasRight) {\n    var cg = new (0, _indexJs.Graph)();\n    _lodashEs.forEach(layerGraphs, function(lg) {\n        var root = lg.graph().root;\n        var sorted = (0, _sortSubgraphJs.sortSubgraph)(lg, root, cg, biasRight);\n        _lodashEs.forEach(sorted.vs, function(v, i) {\n            lg.node(v).order = i;\n        });\n        (0, _addSubgraphConstraintsJs.addSubgraphConstraints)(lg, cg, sorted.vs);\n    });\n}\nfunction assignOrder(g, layering) {\n    _lodashEs.forEach(layering, function(layer) {\n        _lodashEs.forEach(layer, function(v, i) {\n            g.node(v).order = i;\n        });\n    });\n}\n\n},{\"lodash-es\":\"h4a9d\",\"../../graphlib/index.js\":\"j6NXy\",\"../util.js\":\"h7o6h\",\"./add-subgraph-constraints.js\":\"fsBDe\",\"./build-layer-graph.js\":\"lu08j\",\"./cross-count.js\":\"3J4zt\",\"./init-order.js\":\"6clIu\",\"./sort-subgraph.js\":\"9FPWY\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"fsBDe\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"addSubgraphConstraints\", ()=>addSubgraphConstraints);\nvar _lodashEs = require(\"lodash-es\");\nfunction addSubgraphConstraints(g, cg, vs) {\n    var prev = {}, rootPrev;\n    _lodashEs.forEach(vs, function(v) {\n        var child = g.parent(v), parent, prevChild;\n        while(child){\n            parent = g.parent(child);\n            if (parent) {\n                prevChild = prev[parent];\n                prev[parent] = child;\n            } else {\n                prevChild = rootPrev;\n                rootPrev = child;\n            }\n            if (prevChild && prevChild !== child) {\n                cg.setEdge(prevChild, child);\n                return;\n            }\n            child = parent;\n        }\n    });\n/*\n  function dfs(v) {\n    var children = v ? g.children(v) : g.children();\n    if (children.length) {\n      var min = Number.POSITIVE_INFINITY,\n          subgraphs = [];\n      _.each(children, function(child) {\n        var childMin = dfs(child);\n        if (g.children(child).length) {\n          subgraphs.push({ v: child, order: childMin });\n        }\n        min = Math.min(min, childMin);\n      });\n      _.reduce(_.sortBy(subgraphs, \"order\"), function(prev, curr) {\n        cg.setEdge(prev.v, curr.v);\n        return curr;\n      });\n      return min;\n    }\n    return g.node(v).order;\n  }\n  dfs(undefined);\n  */ }\n\n},{\"lodash-es\":\"h4a9d\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"lu08j\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"buildLayerGraph\", ()=>buildLayerGraph);\nvar _lodashEs = require(\"lodash-es\");\nvar _indexJs = require(\"../../graphlib/index.js\");\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */ function buildLayerGraph(g, rank, relationship) {\n    var root = createRootNode(g), result = new (0, _indexJs.Graph)({\n        compound: true\n    }).setGraph({\n        root: root\n    }).setDefaultNodeLabel(function(v) {\n        return g.node(v);\n    });\n    _lodashEs.forEach(g.nodes(), function(v) {\n        var node = g.node(v), parent = g.parent(v);\n        if (node.rank === rank || node.minRank <= rank && rank <= node.maxRank) {\n            result.setNode(v);\n            result.setParent(v, parent || root);\n            // This assumes we have only short edges!\n            _lodashEs.forEach(g[relationship](v), function(e) {\n                var u = e.v === v ? e.w : e.v, edge = result.edge(u, v), weight = !_lodashEs.isUndefined(edge) ? edge.weight : 0;\n                result.setEdge(u, v, {\n                    weight: g.edge(e).weight + weight\n                });\n            });\n            if (_lodashEs.has(node, 'minRank')) result.setNode(v, {\n                borderLeft: node.borderLeft[rank],\n                borderRight: node.borderRight[rank]\n            });\n        }\n    });\n    return result;\n}\nfunction createRootNode(g) {\n    var v;\n    while(g.hasNode(v = _lodashEs.uniqueId('_root')));\n    return v;\n}\n\n},{\"lodash-es\":\"h4a9d\",\"../../graphlib/index.js\":\"j6NXy\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"3J4zt\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"crossCount\", ()=>crossCount);\nvar _lodashEs = require(\"lodash-es\");\n/*\n * A function that takes a layering (an array of layers, each with an array of\n * ordererd nodes) and a graph and returns a weighted crossing count.\n *\n * Pre-conditions:\n *\n *    1. Input graph must be simple (not a multigraph), directed, and include\n *       only simple edges.\n *    2. Edges in the input graph must have assigned weights.\n *\n * Post-conditions:\n *\n *    1. The graph and layering matrix are left unchanged.\n *\n * This algorithm is derived from Barth, et al., \"Bilayer Cross Counting.\"\n */ function crossCount(g, layering) {\n    var cc = 0;\n    for(var i = 1; i < layering.length; ++i)cc += twoLayerCrossCount(g, layering[i - 1], layering[i]);\n    return cc;\n}\nfunction twoLayerCrossCount(g, northLayer, southLayer) {\n    // Sort all of the edges between the north and south layers by their position\n    // in the north layer and then the south. Map these edges to the position of\n    // their head in the south layer.\n    var southPos = _lodashEs.zipObject(southLayer, _lodashEs.map(southLayer, function(v, i) {\n        return i;\n    }));\n    var southEntries = _lodashEs.flatten(_lodashEs.map(northLayer, function(v) {\n        return _lodashEs.sortBy(_lodashEs.map(g.outEdges(v), function(e) {\n            return {\n                pos: southPos[e.w],\n                weight: g.edge(e).weight\n            };\n        }), 'pos');\n    }));\n    // Build the accumulator tree\n    var firstIndex = 1;\n    while(firstIndex < southLayer.length)firstIndex <<= 1;\n    var treeSize = 2 * firstIndex - 1;\n    firstIndex -= 1;\n    var tree = _lodashEs.map(new Array(treeSize), function() {\n        return 0;\n    });\n    // Calculate the weighted crossings\n    var cc = 0;\n    _lodashEs.forEach(// @ts-expect-error\n    southEntries.forEach(function(entry) {\n        var index = entry.pos + firstIndex;\n        tree[index] += entry.weight;\n        var weightSum = 0;\n        // @ts-expect-error\n        while(index > 0){\n            // @ts-expect-error\n            if (index % 2) weightSum += tree[index + 1];\n            // @ts-expect-error\n            index = index - 1 >> 1;\n            tree[index] += entry.weight;\n        }\n        cc += entry.weight * weightSum;\n    }));\n    return cc;\n}\n\n},{\"lodash-es\":\"h4a9d\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"6clIu\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"initOrder\", ()=>initOrder);\nvar _lodashEs = require(\"lodash-es\");\n/*\n * Assigns an initial order value for each node by performing a DFS search\n * starting from nodes in the first rank. Nodes are assigned an order in their\n * rank as they are first visited.\n *\n * This approach comes from Gansner, et al., \"A Technique for Drawing Directed\n * Graphs.\"\n *\n * Returns a layering matrix with an array per layer and each layer sorted by\n * the order of its nodes.\n */ function initOrder(g) {\n    var visited = {};\n    var simpleNodes = _lodashEs.filter(g.nodes(), function(v) {\n        return !g.children(v).length;\n    });\n    var maxRank = _lodashEs.max(_lodashEs.map(simpleNodes, function(v) {\n        return g.node(v).rank;\n    }));\n    var layers = _lodashEs.map(_lodashEs.range(maxRank + 1), function() {\n        return [];\n    });\n    function dfs(v) {\n        if (_lodashEs.has(visited, v)) return;\n        visited[v] = true;\n        var node = g.node(v);\n        layers[node.rank].push(v);\n        _lodashEs.forEach(g.successors(v), dfs);\n    }\n    var orderedVs = _lodashEs.sortBy(simpleNodes, function(v) {\n        return g.node(v).rank;\n    });\n    _lodashEs.forEach(orderedVs, dfs);\n    return layers;\n}\n\n},{\"lodash-es\":\"h4a9d\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"9FPWY\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"sortSubgraph\", ()=>sortSubgraph);\nvar _lodashEs = require(\"lodash-es\");\nvar _barycenterJs = require(\"./barycenter.js\");\nvar _resolveConflictsJs = require(\"./resolve-conflicts.js\");\nvar _sortJs = require(\"./sort.js\");\nfunction sortSubgraph(g, v, cg, biasRight) {\n    var movable = g.children(v);\n    var node = g.node(v);\n    var bl = node ? node.borderLeft : undefined;\n    var br = node ? node.borderRight : undefined;\n    var subgraphs = {};\n    if (bl) movable = _lodashEs.filter(movable, function(w) {\n        return w !== bl && w !== br;\n    });\n    var barycenters = (0, _barycenterJs.barycenter)(g, movable);\n    _lodashEs.forEach(barycenters, function(entry) {\n        if (g.children(entry.v).length) {\n            var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);\n            subgraphs[entry.v] = subgraphResult;\n            if (_lodashEs.has(subgraphResult, 'barycenter')) mergeBarycenters(entry, subgraphResult);\n        }\n    });\n    var entries = (0, _resolveConflictsJs.resolveConflicts)(barycenters, cg);\n    expandSubgraphs(entries, subgraphs);\n    var result = (0, _sortJs.sort)(entries, biasRight);\n    if (bl) {\n        result.vs = _lodashEs.flatten([\n            bl,\n            result.vs,\n            br\n        ]);\n        if (g.predecessors(bl).length) {\n            var blPred = g.node(g.predecessors(bl)[0]), brPred = g.node(g.predecessors(br)[0]);\n            if (!_lodashEs.has(result, 'barycenter')) {\n                result.barycenter = 0;\n                result.weight = 0;\n            }\n            result.barycenter = (result.barycenter * result.weight + blPred.order + brPred.order) / (result.weight + 2);\n            result.weight += 2;\n        }\n    }\n    return result;\n}\nfunction expandSubgraphs(entries, subgraphs) {\n    _lodashEs.forEach(entries, function(entry) {\n        entry.vs = _lodashEs.flatten(entry.vs.map(function(v) {\n            if (subgraphs[v]) return subgraphs[v].vs;\n            return v;\n        }));\n    });\n}\nfunction mergeBarycenters(target, other) {\n    if (!_lodashEs.isUndefined(target.barycenter)) {\n        target.barycenter = (target.barycenter * target.weight + other.barycenter * other.weight) / (target.weight + other.weight);\n        target.weight += other.weight;\n    } else {\n        target.barycenter = other.barycenter;\n        target.weight = other.weight;\n    }\n}\n\n},{\"lodash-es\":\"h4a9d\",\"./barycenter.js\":\"h3VKZ\",\"./resolve-conflicts.js\":\"iOBiO\",\"./sort.js\":\"a4S3E\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"h3VKZ\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"barycenter\", ()=>barycenter);\nvar _lodashEs = require(\"lodash-es\");\nfunction barycenter(g, movable) {\n    return _lodashEs.map(movable, function(v) {\n        var inV = g.inEdges(v);\n        if (!inV.length) return {\n            v: v\n        };\n        else {\n            var result = _lodashEs.reduce(inV, function(acc, e) {\n                var edge = g.edge(e), nodeU = g.node(e.v);\n                return {\n                    sum: acc.sum + edge.weight * nodeU.order,\n                    weight: acc.weight + edge.weight\n                };\n            }, {\n                sum: 0,\n                weight: 0\n            });\n            return {\n                v: v,\n                barycenter: result.sum / result.weight,\n                weight: result.weight\n            };\n        }\n    });\n}\n\n},{\"lodash-es\":\"h4a9d\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"iOBiO\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"resolveConflicts\", ()=>resolveConflicts);\nvar _lodashEs = require(\"lodash-es\");\n/*\n * Given a list of entries of the form {v, barycenter, weight} and a\n * constraint graph this function will resolve any conflicts between the\n * constraint graph and the barycenters for the entries. If the barycenters for\n * an entry would violate a constraint in the constraint graph then we coalesce\n * the nodes in the conflict into a new node that respects the contraint and\n * aggregates barycenter and weight information.\n *\n * This implementation is based on the description in Forster, \"A Fast and\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\n * differs in some specific details.\n *\n * Pre-conditions:\n *\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\n *       no barycenter, then {v}.\n *\n * Returns:\n *\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\n *    `vs` may either be a singleton or it may be an aggregation of nodes\n *    ordered such that they do not violate constraints from the constraint\n *    graph. The property `i` is the lowest original index of any of the\n *    elements in `vs`.\n */ function resolveConflicts(entries, cg) {\n    var mappedEntries = {};\n    _lodashEs.forEach(entries, function(entry, i) {\n        var tmp = mappedEntries[entry.v] = {\n            indegree: 0,\n            in: [],\n            out: [],\n            vs: [\n                entry.v\n            ],\n            i: i\n        };\n        if (!_lodashEs.isUndefined(entry.barycenter)) {\n            // @ts-expect-error\n            tmp.barycenter = entry.barycenter;\n            // @ts-expect-error\n            tmp.weight = entry.weight;\n        }\n    });\n    _lodashEs.forEach(cg.edges(), function(e) {\n        var entryV = mappedEntries[e.v];\n        var entryW = mappedEntries[e.w];\n        if (!_lodashEs.isUndefined(entryV) && !_lodashEs.isUndefined(entryW)) {\n            entryW.indegree++;\n            entryV.out.push(mappedEntries[e.w]);\n        }\n    });\n    var sourceSet = _lodashEs.filter(mappedEntries, function(entry) {\n        // @ts-expect-error\n        return !entry.indegree;\n    });\n    return doResolveConflicts(sourceSet);\n}\nfunction doResolveConflicts(sourceSet) {\n    var entries = [];\n    function handleIn(vEntry) {\n        return function(uEntry) {\n            if (uEntry.merged) return;\n            if (_lodashEs.isUndefined(uEntry.barycenter) || _lodashEs.isUndefined(vEntry.barycenter) || uEntry.barycenter >= vEntry.barycenter) mergeEntries(vEntry, uEntry);\n        };\n    }\n    function handleOut(vEntry) {\n        return function(wEntry) {\n            wEntry['in'].push(vEntry);\n            if (--wEntry.indegree === 0) sourceSet.push(wEntry);\n        };\n    }\n    while(sourceSet.length){\n        var entry = sourceSet.pop();\n        entries.push(entry);\n        _lodashEs.forEach(entry['in'].reverse(), handleIn(entry));\n        _lodashEs.forEach(entry.out, handleOut(entry));\n    }\n    return _lodashEs.map(_lodashEs.filter(entries, function(entry) {\n        return !entry.merged;\n    }), function(entry) {\n        return _lodashEs.pick(entry, [\n            'vs',\n            'i',\n            'barycenter',\n            'weight'\n        ]);\n    });\n}\nfunction mergeEntries(target, source) {\n    var sum = 0;\n    var weight = 0;\n    if (target.weight) {\n        sum += target.barycenter * target.weight;\n        weight += target.weight;\n    }\n    if (source.weight) {\n        sum += source.barycenter * source.weight;\n        weight += source.weight;\n    }\n    target.vs = source.vs.concat(target.vs);\n    target.barycenter = sum / weight;\n    target.weight = weight;\n    target.i = Math.min(source.i, target.i);\n    source.merged = true;\n}\n\n},{\"lodash-es\":\"h4a9d\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"a4S3E\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"sort\", ()=>sort);\nvar _lodashEs = require(\"lodash-es\");\nvar _utilJs = require(\"../util.js\");\nfunction sort(entries, biasRight) {\n    var parts = _utilJs.partition(entries, function(entry) {\n        return _lodashEs.has(entry, 'barycenter');\n    });\n    var sortable = parts.lhs, unsortable = _lodashEs.sortBy(parts.rhs, function(entry) {\n        return -entry.i;\n    }), vs = [], sum = 0, weight = 0, vsIndex = 0;\n    sortable.sort(compareWithBias(!!biasRight));\n    vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n    _lodashEs.forEach(sortable, function(entry) {\n        vsIndex += entry.vs.length;\n        vs.push(entry.vs);\n        sum += entry.barycenter * entry.weight;\n        weight += entry.weight;\n        vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n    });\n    var result = {\n        vs: _lodashEs.flatten(vs)\n    };\n    if (weight) {\n        result.barycenter = sum / weight;\n        result.weight = weight;\n    }\n    return result;\n}\nfunction consumeUnsortable(vs, unsortable, index) {\n    var last;\n    while(unsortable.length && (last = _lodashEs.last(unsortable)).i <= index){\n        unsortable.pop();\n        vs.push(last.vs);\n        index++;\n    }\n    return index;\n}\nfunction compareWithBias(bias) {\n    return function(entryV, entryW) {\n        if (entryV.barycenter < entryW.barycenter) return -1;\n        else if (entryV.barycenter > entryW.barycenter) return 1;\n        return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;\n    };\n}\n\n},{\"lodash-es\":\"h4a9d\",\"../util.js\":\"h7o6h\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"6Jejx\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"parentDummyChains\", ()=>parentDummyChains);\nvar _lodashEs = require(\"lodash-es\");\nfunction parentDummyChains(g) {\n    var postorderNums = postorder(g);\n    _lodashEs.forEach(g.graph().dummyChains, function(v) {\n        var node = g.node(v);\n        var edgeObj = node.edgeObj;\n        var pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);\n        var path = pathData.path;\n        var lca = pathData.lca;\n        var pathIdx = 0;\n        var pathV = path[pathIdx];\n        var ascending = true;\n        while(v !== edgeObj.w){\n            node = g.node(v);\n            if (ascending) {\n                while((pathV = path[pathIdx]) !== lca && g.node(pathV).maxRank < node.rank)pathIdx++;\n                if (pathV === lca) ascending = false;\n            }\n            if (!ascending) {\n                while(pathIdx < path.length - 1 && g.node(pathV = path[pathIdx + 1]).minRank <= node.rank)pathIdx++;\n                pathV = path[pathIdx];\n            }\n            g.setParent(v, pathV);\n            v = g.successors(v)[0];\n        }\n    });\n}\n// Find a path from v to w through the lowest common ancestor (LCA). Return the\n// full path and the LCA.\nfunction findPath(g, postorderNums, v, w) {\n    var vPath = [];\n    var wPath = [];\n    var low = Math.min(postorderNums[v].low, postorderNums[w].low);\n    var lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);\n    var parent;\n    var lca;\n    // Traverse up from v to find the LCA\n    parent = v;\n    do {\n        parent = g.parent(parent);\n        vPath.push(parent);\n    }while (parent && (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\n    lca = parent;\n    // Traverse from w to LCA\n    parent = w;\n    while((parent = g.parent(parent)) !== lca)wPath.push(parent);\n    return {\n        path: vPath.concat(wPath.reverse()),\n        lca: lca\n    };\n}\nfunction postorder(g) {\n    var result = {};\n    var lim = 0;\n    function dfs(v) {\n        var low = lim;\n        _lodashEs.forEach(g.children(v), dfs);\n        result[v] = {\n            low: low,\n            lim: lim++\n        };\n    }\n    _lodashEs.forEach(g.children(), dfs);\n    return result;\n}\n\n},{\"lodash-es\":\"h4a9d\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"lUl3t\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"position\", ()=>position);\nvar _lodashEs = require(\"lodash-es\");\nvar _utilJs = require(\"../util.js\");\nvar _bkJs = require(\"./bk.js\");\nfunction position(g) {\n    g = _utilJs.asNonCompoundGraph(g);\n    positionY(g);\n    _lodashEs.forOwn((0, _bkJs.positionX)(g), function(x, v) {\n        g.node(v).x = x;\n    });\n}\nfunction positionY(g) {\n    var layering = _utilJs.buildLayerMatrix(g);\n    var rankSep = g.graph().ranksep;\n    var prevY = 0;\n    _lodashEs.forEach(layering, function(layer) {\n        var maxHeight = _lodashEs.max(_lodashEs.map(layer, function(v) {\n            return g.node(v).height;\n        }));\n        _lodashEs.forEach(layer, function(v) {\n            g.node(v).y = prevY + maxHeight / 2;\n        });\n        prevY += maxHeight + rankSep;\n    });\n}\n\n},{\"lodash-es\":\"h4a9d\",\"../util.js\":\"h7o6h\",\"./bk.js\":\"4NOzx\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"4NOzx\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/*\n * This module provides coordinate assignment based on Brandes and Köpf, \"Fast\n * and Simple Horizontal Coordinate Assignment.\"\n */ parcelHelpers.export(exports, \"positionX\", ()=>positionX);\nparcelHelpers.export(exports, \"findType1Conflicts\", ()=>findType1Conflicts);\nparcelHelpers.export(exports, \"findType2Conflicts\", ()=>findType2Conflicts);\nparcelHelpers.export(exports, \"addConflict\", ()=>addConflict);\nparcelHelpers.export(exports, \"hasConflict\", ()=>hasConflict);\nparcelHelpers.export(exports, \"verticalAlignment\", ()=>verticalAlignment);\nparcelHelpers.export(exports, \"horizontalCompaction\", ()=>horizontalCompaction);\nparcelHelpers.export(exports, \"alignCoordinates\", ()=>alignCoordinates);\nparcelHelpers.export(exports, \"findSmallestWidthAlignment\", ()=>findSmallestWidthAlignment);\nparcelHelpers.export(exports, \"balance\", ()=>balance);\nvar _lodashEs = require(\"lodash-es\");\nvar _indexJs = require(\"../../graphlib/index.js\");\nvar _utilJs = require(\"../util.js\");\n/*\n * Marks all edges in the graph with a type-1 conflict with the \"type1Conflict\"\n * property. A type-1 conflict is one where a non-inner segment crosses an\n * inner segment. An inner segment is an edge with both incident nodes marked\n * with the \"dummy\" property.\n *\n * This algorithm scans layer by layer, starting with the second, for type-1\n * conflicts between the current layer and the previous layer. For each layer\n * it scans the nodes from left to right until it reaches one that is incident\n * on an inner segment. It then scans predecessors to determine if they have\n * edges that cross that inner segment. At the end a final scan is done for all\n * nodes on the current rank to see if they cross the last visited inner\n * segment.\n *\n * This algorithm (safely) assumes that a dummy node will only be incident on a\n * single node in the layers being scanned.\n */ function findType1Conflicts(g, layering) {\n    var conflicts = {};\n    function visitLayer(prevLayer, layer) {\n        var // segment.\n        k0 = 0, // Tracks the last node in this layer scanned for crossings with a type-1\n        // segment.\n        scanPos = 0, prevLayerLength = prevLayer.length, lastNode = _lodashEs.last(layer);\n        _lodashEs.forEach(layer, function(v, i) {\n            var w = findOtherInnerSegmentNode(g, v), k1 = w ? g.node(w).order : prevLayerLength;\n            if (w || v === lastNode) {\n                _lodashEs.forEach(layer.slice(scanPos, i + 1), function(scanNode) {\n                    _lodashEs.forEach(g.predecessors(scanNode), function(u) {\n                        var uLabel = g.node(u), uPos = uLabel.order;\n                        if ((uPos < k0 || k1 < uPos) && !(uLabel.dummy && g.node(scanNode).dummy)) addConflict(conflicts, u, scanNode);\n                    });\n                });\n                // @ts-expect-error\n                scanPos = i + 1;\n                k0 = k1;\n            }\n        });\n        return layer;\n    }\n    _lodashEs.reduce(layering, visitLayer);\n    return conflicts;\n}\nfunction findType2Conflicts(g, layering) {\n    var conflicts = {};\n    function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {\n        var v;\n        _lodashEs.forEach(_lodashEs.range(southPos, southEnd), function(i) {\n            v = south[i];\n            if (g.node(v).dummy) _lodashEs.forEach(g.predecessors(v), function(u) {\n                var uNode = g.node(u);\n                if (uNode.dummy && (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) addConflict(conflicts, u, v);\n            });\n        });\n    }\n    function visitLayer(north, south) {\n        var prevNorthPos = -1, nextNorthPos, southPos = 0;\n        _lodashEs.forEach(south, function(v, southLookahead) {\n            if (g.node(v).dummy === 'border') {\n                var predecessors = g.predecessors(v);\n                if (predecessors.length) {\n                    nextNorthPos = g.node(predecessors[0]).order;\n                    scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);\n                    // @ts-expect-error\n                    southPos = southLookahead;\n                    prevNorthPos = nextNorthPos;\n                }\n            }\n            scan(south, southPos, south.length, nextNorthPos, north.length);\n        });\n        return south;\n    }\n    _lodashEs.reduce(layering, visitLayer);\n    return conflicts;\n}\nfunction findOtherInnerSegmentNode(g, v) {\n    if (g.node(v).dummy) return _lodashEs.find(g.predecessors(v), function(u) {\n        return g.node(u).dummy;\n    });\n}\nfunction addConflict(conflicts, v, w) {\n    if (v > w) {\n        var tmp = v;\n        v = w;\n        w = tmp;\n    }\n    var conflictsV = conflicts[v];\n    if (!conflictsV) conflicts[v] = conflictsV = {};\n    conflictsV[w] = true;\n}\nfunction hasConflict(conflicts, v, w) {\n    if (v > w) {\n        var tmp = v;\n        v = w;\n        w = tmp;\n    }\n    return _lodashEs.has(conflicts[v], w);\n}\n/*\n * Try to align nodes into vertical \"blocks\" where possible. This algorithm\n * attempts to align a node with one of its median neighbors. If the edge\n * connecting a neighbor is a type-1 conflict then we ignore that possibility.\n * If a previous node has already formed a block with a node after the node\n * we're trying to form a block with, we also ignore that possibility - our\n * blocks would be split in that scenario.\n */ function verticalAlignment(g, layering, conflicts, neighborFn) {\n    var root = {}, align = {}, pos = {};\n    // We cache the position here based on the layering because the graph and\n    // layering may be out of sync. The layering matrix is manipulated to\n    // generate different extreme alignments.\n    _lodashEs.forEach(layering, function(layer) {\n        _lodashEs.forEach(layer, function(v, order) {\n            root[v] = v;\n            align[v] = v;\n            pos[v] = order;\n        });\n    });\n    _lodashEs.forEach(layering, function(layer) {\n        var prevIdx = -1;\n        _lodashEs.forEach(layer, function(v) {\n            var ws = neighborFn(v);\n            if (ws.length) {\n                ws = _lodashEs.sortBy(ws, function(w) {\n                    return pos[w];\n                });\n                var mp = (ws.length - 1) / 2;\n                for(var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i){\n                    var w = ws[i];\n                    if (align[v] === v && prevIdx < pos[w] && !hasConflict(conflicts, v, w)) {\n                        align[w] = v;\n                        align[v] = root[v] = root[w];\n                        prevIdx = pos[w];\n                    }\n                }\n            }\n        });\n    });\n    return {\n        root: root,\n        align: align\n    };\n}\nfunction horizontalCompaction(g, layering, root, align, reverseSep) {\n    // This portion of the algorithm differs from BK due to a number of problems.\n    // Instead of their algorithm we construct a new block graph and do two\n    // sweeps. The first sweep places blocks with the smallest possible\n    // coordinates. The second sweep removes unused space by moving blocks to the\n    // greatest coordinates without violating separation.\n    var xs = {}, blockG = buildBlockGraph(g, layering, root, reverseSep), borderType = reverseSep ? 'borderLeft' : 'borderRight';\n    function iterate(setXsFunc, nextNodesFunc) {\n        var stack = blockG.nodes();\n        var elem = stack.pop();\n        var visited = {};\n        while(elem){\n            if (visited[elem]) setXsFunc(elem);\n            else {\n                visited[elem] = true;\n                stack.push(elem);\n                stack = stack.concat(nextNodesFunc(elem));\n            }\n            elem = stack.pop();\n        }\n    }\n    // First pass, assign smallest coordinates\n    function pass1(elem) {\n        xs[elem] = blockG.inEdges(elem).reduce(function(acc, e) {\n            return Math.max(acc, xs[e.v] + blockG.edge(e));\n        }, 0);\n    }\n    // Second pass, assign greatest coordinates\n    function pass2(elem) {\n        var min = blockG.outEdges(elem).reduce(function(acc, e) {\n            return Math.min(acc, xs[e.w] - blockG.edge(e));\n        }, Number.POSITIVE_INFINITY);\n        var node = g.node(elem);\n        if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) xs[elem] = Math.max(xs[elem], min);\n    }\n    iterate(pass1, blockG.predecessors.bind(blockG));\n    iterate(pass2, blockG.successors.bind(blockG));\n    // Assign x coordinates to all nodes\n    _lodashEs.forEach(align, function(v) {\n        xs[v] = xs[root[v]];\n    });\n    return xs;\n}\nfunction buildBlockGraph(g, layering, root, reverseSep) {\n    var blockGraph = new (0, _indexJs.Graph)(), graphLabel = g.graph(), sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);\n    _lodashEs.forEach(layering, function(layer) {\n        var u;\n        _lodashEs.forEach(layer, function(v) {\n            var vRoot = root[v];\n            blockGraph.setNode(vRoot);\n            if (u) {\n                var uRoot = root[u], prevMax = blockGraph.edge(uRoot, vRoot);\n                blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));\n            }\n            u = v;\n        });\n    });\n    return blockGraph;\n}\n/*\n * Returns the alignment that has the smallest width of the given alignments.\n */ function findSmallestWidthAlignment(g, xss) {\n    return _lodashEs.minBy(_lodashEs.values(xss), function(xs) {\n        var max = Number.NEGATIVE_INFINITY;\n        var min = Number.POSITIVE_INFINITY;\n        _lodashEs.forIn(xs, function(x, v) {\n            var halfWidth = width(g, v) / 2;\n            max = Math.max(x + halfWidth, max);\n            min = Math.min(x - halfWidth, min);\n        });\n        return max - min;\n    });\n}\n/*\n * Align the coordinates of each of the layout alignments such that\n * left-biased alignments have their minimum coordinate at the same point as\n * the minimum coordinate of the smallest width alignment and right-biased\n * alignments have their maximum coordinate at the same point as the maximum\n * coordinate of the smallest width alignment.\n */ function alignCoordinates(xss, alignTo) {\n    var alignToVals = _lodashEs.values(alignTo), alignToMin = _lodashEs.min(alignToVals), alignToMax = _lodashEs.max(alignToVals);\n    _lodashEs.forEach([\n        'u',\n        'd'\n    ], function(vert) {\n        _lodashEs.forEach([\n            'l',\n            'r'\n        ], function(horiz) {\n            var alignment = vert + horiz, xs = xss[alignment], delta;\n            if (xs === alignTo) return;\n            var xsVals = _lodashEs.values(xs);\n            delta = horiz === 'l' ? alignToMin - _lodashEs.min(xsVals) : alignToMax - _lodashEs.max(xsVals);\n            if (delta) xss[alignment] = _lodashEs.mapValues(xs, function(x) {\n                return x + delta;\n            });\n        });\n    });\n}\nfunction balance(xss, align) {\n    return _lodashEs.mapValues(xss.ul, function(ignore, v) {\n        if (align) return xss[align.toLowerCase()][v];\n        else {\n            var xs = _lodashEs.sortBy(_lodashEs.map(xss, v));\n            return (xs[1] + xs[2]) / 2;\n        }\n    });\n}\nfunction positionX(g) {\n    var layering = _utilJs.buildLayerMatrix(g);\n    var conflicts = _lodashEs.merge(findType1Conflicts(g, layering), findType2Conflicts(g, layering));\n    var xss = {};\n    var adjustedLayering;\n    _lodashEs.forEach([\n        'u',\n        'd'\n    ], function(vert) {\n        adjustedLayering = vert === 'u' ? layering : _lodashEs.values(layering).reverse();\n        _lodashEs.forEach([\n            'l',\n            'r'\n        ], function(horiz) {\n            if (horiz === 'r') adjustedLayering = _lodashEs.map(adjustedLayering, function(inner) {\n                return _lodashEs.values(inner).reverse();\n            });\n            var neighborFn = (vert === 'u' ? g.predecessors : g.successors).bind(g);\n            var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\n            var xs = horizontalCompaction(g, adjustedLayering, align.root, align.align, horiz === 'r');\n            if (horiz === 'r') xs = _lodashEs.mapValues(xs, function(x) {\n                return -x;\n            });\n            xss[vert + horiz] = xs;\n        });\n    });\n    var smallestWidth = findSmallestWidthAlignment(g, xss);\n    alignCoordinates(xss, smallestWidth);\n    return balance(xss, g.graph().align);\n}\nfunction sep(nodeSep, edgeSep, reverseSep) {\n    return function(g, v, w) {\n        var vLabel = g.node(v);\n        var wLabel = g.node(w);\n        var sum = 0;\n        var delta;\n        sum += vLabel.width / 2;\n        if (_lodashEs.has(vLabel, 'labelpos')) switch(vLabel.labelpos.toLowerCase()){\n            case 'l':\n                delta = -vLabel.width / 2;\n                break;\n            case 'r':\n                delta = vLabel.width / 2;\n                break;\n        }\n        if (delta) sum += reverseSep ? delta : -delta;\n        delta = 0;\n        sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;\n        sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;\n        sum += wLabel.width / 2;\n        if (_lodashEs.has(wLabel, 'labelpos')) switch(wLabel.labelpos.toLowerCase()){\n            case 'l':\n                delta = wLabel.width / 2;\n                break;\n            case 'r':\n                delta = -wLabel.width / 2;\n                break;\n        }\n        if (delta) sum += reverseSep ? delta : -delta;\n        delta = 0;\n        return sum;\n    };\n}\nfunction width(g, v) {\n    return g.node(v).width;\n}\n\n},{\"lodash-es\":\"h4a9d\",\"../../graphlib/index.js\":\"j6NXy\",\"../util.js\":\"h7o6h\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}]},[], null, \"parcelRequire94c2\")\n\n//# sourceMappingURL=flowDiagram-66a62f08.5151a16b.js.map\n","import * as acyclic from './acyclic.js';\nimport { layout } from './layout.js';\nimport * as normalize from './normalize.js';\nimport { rank } from './rank/index.js';\n\nexport { acyclic, normalize, rank, layout };\n","import * as _ from 'lodash-es';\nimport { greedyFAS } from './greedy-fas.js';\n\nexport { run, undo };\n\nfunction run(g) {\n  var fas = g.graph().acyclicer === 'greedy' ? greedyFAS(g, weightFn(g)) : dfsFAS(g);\n  _.forEach(fas, function (e) {\n    var label = g.edge(e);\n    g.removeEdge(e);\n    label.forwardName = e.name;\n    label.reversed = true;\n    g.setEdge(e.w, e.v, label, _.uniqueId('rev'));\n  });\n\n  function weightFn(g) {\n    return function (e) {\n      return g.edge(e).weight;\n    };\n  }\n}\n\nfunction dfsFAS(g) {\n  var fas = [];\n  var stack = {};\n  var visited = {};\n\n  function dfs(v) {\n    if (_.has(visited, v)) {\n      return;\n    }\n    visited[v] = true;\n    stack[v] = true;\n    _.forEach(g.outEdges(v), function (e) {\n      if (_.has(stack, e.w)) {\n        fas.push(e);\n      } else {\n        dfs(e.w);\n      }\n    });\n    delete stack[v];\n  }\n\n  _.forEach(g.nodes(), dfs);\n  return fas;\n}\n\nfunction undo(g) {\n  _.forEach(g.edges(), function (e) {\n    var label = g.edge(e);\n    if (label.reversed) {\n      g.removeEdge(e);\n\n      var forwardName = label.forwardName;\n      delete label.reversed;\n      delete label.forwardName;\n      g.setEdge(e.w, e.v, label, forwardName);\n    }\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { List } from './data/list.js';\n\n/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n */\nexport { greedyFAS };\n\nvar DEFAULT_WEIGHT_FN = _.constant(1);\n\nfunction greedyFAS(g, weightFn) {\n  if (g.nodeCount() <= 1) {\n    return [];\n  }\n  var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);\n  var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\n\n  // Expand multi-edges\n  return _.flatten(\n    _.map(results, function (e) {\n      return g.outEdges(e.v, e.w);\n    })\n  );\n}\n\nfunction doGreedyFAS(g, buckets, zeroIdx) {\n  var results = [];\n  var sources = buckets[buckets.length - 1];\n  var sinks = buckets[0];\n\n  var entry;\n  while (g.nodeCount()) {\n    while ((entry = sinks.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    while ((entry = sources.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    if (g.nodeCount()) {\n      for (var i = buckets.length - 2; i > 0; --i) {\n        entry = buckets[i].dequeue();\n        if (entry) {\n          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));\n          break;\n        }\n      }\n    }\n  }\n\n  return results;\n}\n\nfunction removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {\n  var results = collectPredecessors ? [] : undefined;\n\n  _.forEach(g.inEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var uEntry = g.node(edge.v);\n\n    if (collectPredecessors) {\n      results.push({ v: edge.v, w: edge.w });\n    }\n\n    uEntry.out -= weight;\n    assignBucket(buckets, zeroIdx, uEntry);\n  });\n\n  _.forEach(g.outEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var w = edge.w;\n    var wEntry = g.node(w);\n    wEntry['in'] -= weight;\n    assignBucket(buckets, zeroIdx, wEntry);\n  });\n\n  g.removeNode(entry.v);\n\n  return results;\n}\n\nfunction buildState(g, weightFn) {\n  var fasGraph = new Graph();\n  var maxIn = 0;\n  var maxOut = 0;\n\n  _.forEach(g.nodes(), function (v) {\n    fasGraph.setNode(v, { v: v, in: 0, out: 0 });\n  });\n\n  // Aggregate weights on nodes, but also sum the weights across multi-edges\n  // into a single edge for the fasGraph.\n  _.forEach(g.edges(), function (e) {\n    var prevWeight = fasGraph.edge(e.v, e.w) || 0;\n    var weight = weightFn(e);\n    var edgeWeight = prevWeight + weight;\n    fasGraph.setEdge(e.v, e.w, edgeWeight);\n    maxOut = Math.max(maxOut, (fasGraph.node(e.v).out += weight));\n    maxIn = Math.max(maxIn, (fasGraph.node(e.w)['in'] += weight));\n  });\n\n  var buckets = _.range(maxOut + maxIn + 3).map(function () {\n    return new List();\n  });\n  var zeroIdx = maxIn + 1;\n\n  _.forEach(fasGraph.nodes(), function (v) {\n    assignBucket(buckets, zeroIdx, fasGraph.node(v));\n  });\n\n  return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };\n}\n\nfunction assignBucket(buckets, zeroIdx, entry) {\n  if (!entry.out) {\n    buckets[0].enqueue(entry);\n  } else if (!entry['in']) {\n    buckets[buckets.length - 1].enqueue(entry);\n  } else {\n    buckets[entry.out - entry['in'] + zeroIdx].enqueue(entry);\n  }\n}\n","/*\n * Simple doubly linked list implementation derived from Cormen, et al.,\n * \"Introduction to Algorithms\".\n */\n\nexport { List };\n\nclass List {\n  constructor() {\n    var sentinel = {};\n    sentinel._next = sentinel._prev = sentinel;\n    this._sentinel = sentinel;\n  }\n  dequeue() {\n    var sentinel = this._sentinel;\n    var entry = sentinel._prev;\n    if (entry !== sentinel) {\n      unlink(entry);\n      return entry;\n    }\n  }\n  enqueue(entry) {\n    var sentinel = this._sentinel;\n    if (entry._prev && entry._next) {\n      unlink(entry);\n    }\n    entry._next = sentinel._next;\n    sentinel._next._prev = entry;\n    sentinel._next = entry;\n    entry._prev = sentinel;\n  }\n  toString() {\n    var strs = [];\n    var sentinel = this._sentinel;\n    var curr = sentinel._prev;\n    while (curr !== sentinel) {\n      strs.push(JSON.stringify(curr, filterOutLinks));\n      curr = curr._prev;\n    }\n    return '[' + strs.join(', ') + ']';\n  }\n}\n\nfunction unlink(entry) {\n  entry._prev._next = entry._next;\n  entry._next._prev = entry._prev;\n  delete entry._next;\n  delete entry._prev;\n}\n\nfunction filterOutLinks(k, v) {\n  if (k !== '_next' && k !== '_prev') {\n    return v;\n  }\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { addBorderSegments } from './add-border-segments.js';\nimport * as coordinateSystem from './coordinate-system.js';\nimport * as acyclic from './acyclic.js';\nimport * as normalize from './normalize.js';\nimport { rank } from './rank/index.js';\nimport * as nestingGraph from './nesting-graph.js';\nimport { order } from './order/index.js';\nimport { parentDummyChains } from './parent-dummy-chains.js';\nimport { position } from './position/index.js';\nimport * as util from './util.js';\n\nexport { layout };\n\nfunction layout(g, opts) {\n  var time = opts && opts.debugTiming ? util.time : util.notime;\n  time('layout', function () {\n    var layoutGraph = time('  buildLayoutGraph', function () {\n      return buildLayoutGraph(g);\n    });\n    time('  runLayout', function () {\n      runLayout(layoutGraph, time);\n    });\n    time('  updateInputGraph', function () {\n      updateInputGraph(g, layoutGraph);\n    });\n  });\n}\n\nfunction runLayout(g, time) {\n  time('    makeSpaceForEdgeLabels', function () {\n    makeSpaceForEdgeLabels(g);\n  });\n  time('    removeSelfEdges', function () {\n    removeSelfEdges(g);\n  });\n  time('    acyclic', function () {\n    acyclic.run(g);\n  });\n  time('    nestingGraph.run', function () {\n    nestingGraph.run(g);\n  });\n  time('    rank', function () {\n    rank(util.asNonCompoundGraph(g));\n  });\n  time('    injectEdgeLabelProxies', function () {\n    injectEdgeLabelProxies(g);\n  });\n  time('    removeEmptyRanks', function () {\n    util.removeEmptyRanks(g);\n  });\n  time('    nestingGraph.cleanup', function () {\n    nestingGraph.cleanup(g);\n  });\n  time('    normalizeRanks', function () {\n    util.normalizeRanks(g);\n  });\n  time('    assignRankMinMax', function () {\n    assignRankMinMax(g);\n  });\n  time('    removeEdgeLabelProxies', function () {\n    removeEdgeLabelProxies(g);\n  });\n  time('    normalize.run', function () {\n    normalize.run(g);\n  });\n  time('    parentDummyChains', function () {\n    parentDummyChains(g);\n  });\n  time('    addBorderSegments', function () {\n    addBorderSegments(g);\n  });\n  time('    order', function () {\n    order(g);\n  });\n  time('    insertSelfEdges', function () {\n    insertSelfEdges(g);\n  });\n  time('    adjustCoordinateSystem', function () {\n    coordinateSystem.adjust(g);\n  });\n  time('    position', function () {\n    position(g);\n  });\n  time('    positionSelfEdges', function () {\n    positionSelfEdges(g);\n  });\n  time('    removeBorderNodes', function () {\n    removeBorderNodes(g);\n  });\n  time('    normalize.undo', function () {\n    normalize.undo(g);\n  });\n  time('    fixupEdgeLabelCoords', function () {\n    fixupEdgeLabelCoords(g);\n  });\n  time('    undoCoordinateSystem', function () {\n    coordinateSystem.undo(g);\n  });\n  time('    translateGraph', function () {\n    translateGraph(g);\n  });\n  time('    assignNodeIntersects', function () {\n    assignNodeIntersects(g);\n  });\n  time('    reversePoints', function () {\n    reversePointsForReversedEdges(g);\n  });\n  time('    acyclic.undo', function () {\n    acyclic.undo(g);\n  });\n}\n\n/*\n * Copies final layout information from the layout graph back to the input\n * graph. This process only copies whitelisted attributes from the layout graph\n * to the input graph, so it serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction updateInputGraph(inputGraph, layoutGraph) {\n  _.forEach(inputGraph.nodes(), function (v) {\n    var inputLabel = inputGraph.node(v);\n    var layoutLabel = layoutGraph.node(v);\n\n    if (inputLabel) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n\n      if (layoutGraph.children(v).length) {\n        inputLabel.width = layoutLabel.width;\n        inputLabel.height = layoutLabel.height;\n      }\n    }\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var inputLabel = inputGraph.edge(e);\n    var layoutLabel = layoutGraph.edge(e);\n\n    inputLabel.points = layoutLabel.points;\n    if (_.has(layoutLabel, 'x')) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n    }\n  });\n\n  inputGraph.graph().width = layoutGraph.graph().width;\n  inputGraph.graph().height = layoutGraph.graph().height;\n}\n\nvar graphNumAttrs = ['nodesep', 'edgesep', 'ranksep', 'marginx', 'marginy'];\nvar graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: 'tb' };\nvar graphAttrs = ['acyclicer', 'ranker', 'rankdir', 'align'];\nvar nodeNumAttrs = ['width', 'height'];\nvar nodeDefaults = { width: 0, height: 0 };\nvar edgeNumAttrs = ['minlen', 'weight', 'width', 'height', 'labeloffset'];\nvar edgeDefaults = {\n  minlen: 1,\n  weight: 1,\n  width: 0,\n  height: 0,\n  labeloffset: 10,\n  labelpos: 'r',\n};\nvar edgeAttrs = ['labelpos'];\n\n/*\n * Constructs a new graph from the input graph, which can be used for layout.\n * This process copies only whitelisted attributes from the input graph to the\n * layout graph. Thus this function serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction buildLayoutGraph(inputGraph) {\n  var g = new Graph({ multigraph: true, compound: true });\n  var graph = canonicalize(inputGraph.graph());\n\n  g.setGraph(\n    _.merge({}, graphDefaults, selectNumberAttrs(graph, graphNumAttrs), _.pick(graph, graphAttrs))\n  );\n\n  _.forEach(inputGraph.nodes(), function (v) {\n    var node = canonicalize(inputGraph.node(v));\n    g.setNode(v, _.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));\n    g.setParent(v, inputGraph.parent(v));\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var edge = canonicalize(inputGraph.edge(e));\n    g.setEdge(\n      e,\n      _.merge({}, edgeDefaults, selectNumberAttrs(edge, edgeNumAttrs), _.pick(edge, edgeAttrs))\n    );\n  });\n\n  return g;\n}\n\n/*\n * This idea comes from the Gansner paper: to account for edge labels in our\n * layout we split each rank in half by doubling minlen and halving ranksep.\n * Then we can place labels at these mid-points between nodes.\n *\n * We also add some minimal padding to the width to push the label for the edge\n * away from the edge itself a bit.\n */\nfunction makeSpaceForEdgeLabels(g) {\n  var graph = g.graph();\n  graph.ranksep /= 2;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    edge.minlen *= 2;\n    if (edge.labelpos.toLowerCase() !== 'c') {\n      if (graph.rankdir === 'TB' || graph.rankdir === 'BT') {\n        edge.width += edge.labeloffset;\n      } else {\n        edge.height += edge.labeloffset;\n      }\n    }\n  });\n}\n\n/*\n * Creates temporary dummy nodes that capture the rank in which each edge's\n * label is going to, if it has one of non-zero width and height. We do this\n * so that we can safely remove empty ranks while preserving balance for the\n * label's position.\n */\nfunction injectEdgeLabelProxies(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.width && edge.height) {\n      var v = g.node(e.v);\n      var w = g.node(e.w);\n      var label = { rank: (w.rank - v.rank) / 2 + v.rank, e: e };\n      util.addDummyNode(g, 'edge-proxy', label, '_ep');\n    }\n  });\n}\n\nfunction assignRankMinMax(g) {\n  var maxRank = 0;\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.borderTop) {\n      node.minRank = g.node(node.borderTop).rank;\n      node.maxRank = g.node(node.borderBottom).rank;\n      // @ts-expect-error\n      maxRank = _.max(maxRank, node.maxRank);\n    }\n  });\n  g.graph().maxRank = maxRank;\n}\n\nfunction removeEdgeLabelProxies(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'edge-proxy') {\n      g.edge(node.e).labelRank = node.rank;\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction translateGraph(g) {\n  var minX = Number.POSITIVE_INFINITY;\n  var maxX = 0;\n  var minY = Number.POSITIVE_INFINITY;\n  var maxY = 0;\n  var graphLabel = g.graph();\n  var marginX = graphLabel.marginx || 0;\n  var marginY = graphLabel.marginy || 0;\n\n  function getExtremes(attrs) {\n    var x = attrs.x;\n    var y = attrs.y;\n    var w = attrs.width;\n    var h = attrs.height;\n    minX = Math.min(minX, x - w / 2);\n    maxX = Math.max(maxX, x + w / 2);\n    minY = Math.min(minY, y - h / 2);\n    maxY = Math.max(maxY, y + h / 2);\n  }\n\n  _.forEach(g.nodes(), function (v) {\n    getExtremes(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (_.has(edge, 'x')) {\n      getExtremes(edge);\n    }\n  });\n\n  minX -= marginX;\n  minY -= marginY;\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    node.x -= minX;\n    node.y -= minY;\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, function (p) {\n      p.x -= minX;\n      p.y -= minY;\n    });\n    if (_.has(edge, 'x')) {\n      edge.x -= minX;\n    }\n    if (_.has(edge, 'y')) {\n      edge.y -= minY;\n    }\n  });\n\n  graphLabel.width = maxX - minX + marginX;\n  graphLabel.height = maxY - minY + marginY;\n}\n\nfunction assignNodeIntersects(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    var nodeV = g.node(e.v);\n    var nodeW = g.node(e.w);\n    var p1, p2;\n    if (!edge.points) {\n      edge.points = [];\n      p1 = nodeW;\n      p2 = nodeV;\n    } else {\n      p1 = edge.points[0];\n      p2 = edge.points[edge.points.length - 1];\n    }\n    edge.points.unshift(util.intersectRect(nodeV, p1));\n    edge.points.push(util.intersectRect(nodeW, p2));\n  });\n}\n\nfunction fixupEdgeLabelCoords(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (_.has(edge, 'x')) {\n      if (edge.labelpos === 'l' || edge.labelpos === 'r') {\n        edge.width -= edge.labeloffset;\n      }\n      switch (edge.labelpos) {\n        case 'l':\n          edge.x -= edge.width / 2 + edge.labeloffset;\n          break;\n        case 'r':\n          edge.x += edge.width / 2 + edge.labeloffset;\n          break;\n      }\n    }\n  });\n}\n\nfunction reversePointsForReversedEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.reversed) {\n      edge.points.reverse();\n    }\n  });\n}\n\nfunction removeBorderNodes(g) {\n  _.forEach(g.nodes(), function (v) {\n    if (g.children(v).length) {\n      var node = g.node(v);\n      var t = g.node(node.borderTop);\n      var b = g.node(node.borderBottom);\n      var l = g.node(_.last(node.borderLeft));\n      var r = g.node(_.last(node.borderRight));\n\n      node.width = Math.abs(r.x - l.x);\n      node.height = Math.abs(b.y - t.y);\n      node.x = l.x + node.width / 2;\n      node.y = t.y + node.height / 2;\n    }\n  });\n\n  _.forEach(g.nodes(), function (v) {\n    if (g.node(v).dummy === 'border') {\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction removeSelfEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    if (e.v === e.w) {\n      var node = g.node(e.v);\n      if (!node.selfEdges) {\n        node.selfEdges = [];\n      }\n      node.selfEdges.push({ e: e, label: g.edge(e) });\n      g.removeEdge(e);\n    }\n  });\n}\n\nfunction insertSelfEdges(g) {\n  var layers = util.buildLayerMatrix(g);\n  _.forEach(layers, function (layer) {\n    var orderShift = 0;\n    _.forEach(layer, function (v, i) {\n      var node = g.node(v);\n      node.order = i + orderShift;\n      _.forEach(node.selfEdges, function (selfEdge) {\n        util.addDummyNode(\n          g,\n          'selfedge',\n          {\n            width: selfEdge.label.width,\n            height: selfEdge.label.height,\n            rank: node.rank,\n            order: i + ++orderShift,\n            e: selfEdge.e,\n            label: selfEdge.label,\n          },\n          '_se'\n        );\n      });\n      delete node.selfEdges;\n    });\n  });\n}\n\nfunction positionSelfEdges(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'selfedge') {\n      var selfNode = g.node(node.e.v);\n      var x = selfNode.x + selfNode.width / 2;\n      var y = selfNode.y;\n      var dx = node.x - x;\n      var dy = selfNode.height / 2;\n      g.setEdge(node.e, node.label);\n      g.removeNode(v);\n      node.label.points = [\n        { x: x + (2 * dx) / 3, y: y - dy },\n        { x: x + (5 * dx) / 6, y: y - dy },\n        { x: x + dx, y: y },\n        { x: x + (5 * dx) / 6, y: y + dy },\n        { x: x + (2 * dx) / 3, y: y + dy },\n      ];\n      node.label.x = node.x;\n      node.label.y = node.y;\n    }\n  });\n}\n\nfunction selectNumberAttrs(obj, attrs) {\n  return _.mapValues(_.pick(obj, attrs), Number);\n}\n\nfunction canonicalize(attrs) {\n  var newAttrs = {};\n  _.forEach(attrs, function (v, k) {\n    newAttrs[k.toLowerCase()] = v;\n  });\n  return newAttrs;\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { addBorderSegments };\n\nfunction addBorderSegments(g) {\n  function dfs(v) {\n    var children = g.children(v);\n    var node = g.node(v);\n    if (children.length) {\n      _.forEach(children, dfs);\n    }\n\n    if (_.has(node, 'minRank')) {\n      node.borderLeft = [];\n      node.borderRight = [];\n      for (var rank = node.minRank, maxRank = node.maxRank + 1; rank < maxRank; ++rank) {\n        addBorderNode(g, 'borderLeft', '_bl', v, node, rank);\n        addBorderNode(g, 'borderRight', '_br', v, node, rank);\n      }\n    }\n  }\n\n  _.forEach(g.children(), dfs);\n}\n\nfunction addBorderNode(g, prop, prefix, sg, sgNode, rank) {\n  var label = { width: 0, height: 0, rank: rank, borderType: prop };\n  var prev = sgNode[prop][rank - 1];\n  var curr = util.addDummyNode(g, 'border', label, prefix);\n  sgNode[prop][rank] = curr;\n  g.setParent(curr, sg);\n  if (prev) {\n    g.setEdge(prev, curr, { weight: 1 });\n  }\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\n\nexport {\n  addDummyNode,\n  simplify,\n  asNonCompoundGraph,\n  successorWeights,\n  predecessorWeights,\n  intersectRect,\n  buildLayerMatrix,\n  normalizeRanks,\n  removeEmptyRanks,\n  addBorderNode,\n  maxRank,\n  partition,\n  time,\n  notime,\n};\n\n/*\n * Adds a dummy node to the graph and return v.\n */\nfunction addDummyNode(g, type, attrs, name) {\n  var v;\n  do {\n    v = _.uniqueId(name);\n  } while (g.hasNode(v));\n\n  attrs.dummy = type;\n  g.setNode(v, attrs);\n  return v;\n}\n\n/*\n * Returns a new graph with only simple edges. Handles aggregation of data\n * associated with multi-edges.\n */\nfunction simplify(g) {\n  var simplified = new Graph().setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    simplified.setNode(v, g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 };\n    var label = g.edge(e);\n    simplified.setEdge(e.v, e.w, {\n      weight: simpleLabel.weight + label.weight,\n      minlen: Math.max(simpleLabel.minlen, label.minlen),\n    });\n  });\n  return simplified;\n}\n\nfunction asNonCompoundGraph(g) {\n  var simplified = new Graph({ multigraph: g.isMultigraph() }).setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    if (!g.children(v).length) {\n      simplified.setNode(v, g.node(v));\n    }\n  });\n  _.forEach(g.edges(), function (e) {\n    simplified.setEdge(e, g.edge(e));\n  });\n  return simplified;\n}\n\nfunction successorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var sucs = {};\n    _.forEach(g.outEdges(v), function (e) {\n      sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;\n    });\n    return sucs;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\nfunction predecessorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var preds = {};\n    _.forEach(g.inEdges(v), function (e) {\n      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;\n    });\n    return preds;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\n/*\n * Finds where a line starting at point ({x, y}) would intersect a rectangle\n * ({x, y, width, height}) if it were pointing at the rectangle's center.\n */\nfunction intersectRect(rect, point) {\n  var x = rect.x;\n  var y = rect.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = rect.width / 2;\n  var h = rect.height / 2;\n\n  if (!dx && !dy) {\n    throw new Error('Not possible to find intersection inside of the rectangle');\n  }\n\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = (h * dx) / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = (w * dy) / dx;\n  }\n\n  return { x: x + sx, y: y + sy };\n}\n\n/*\n * Given a DAG with each node assigned \"rank\" and \"order\" properties, this\n * function will produce a matrix with the ids of each node.\n */\nfunction buildLayerMatrix(g) {\n  var layering = _.map(_.range(maxRank(g) + 1), function () {\n    return [];\n  });\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    var rank = node.rank;\n    if (!_.isUndefined(rank)) {\n      layering[rank][node.order] = v;\n    }\n  });\n  return layering;\n}\n\n/*\n * Adjusts the ranks for all nodes in the graph such that all nodes v have\n * rank(v) >= 0 and at least one node w has rank(w) = 0.\n */\nfunction normalizeRanks(g) {\n  var min = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    })\n  );\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (_.has(node, 'rank')) {\n      node.rank -= min;\n    }\n  });\n}\n\nfunction removeEmptyRanks(g) {\n  // Ranks may not start at 0, so we need to offset them\n  var offset = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    })\n  );\n\n  var layers = [];\n  _.forEach(g.nodes(), function (v) {\n    var rank = g.node(v).rank - offset;\n    if (!layers[rank]) {\n      layers[rank] = [];\n    }\n    layers[rank].push(v);\n  });\n\n  var delta = 0;\n  var nodeRankFactor = g.graph().nodeRankFactor;\n  _.forEach(layers, function (vs, i) {\n    if (_.isUndefined(vs) && i % nodeRankFactor !== 0) {\n      --delta;\n    } else if (delta) {\n      _.forEach(vs, function (v) {\n        g.node(v).rank += delta;\n      });\n    }\n  });\n}\n\nfunction addBorderNode(g, prefix, rank, order) {\n  var node = {\n    width: 0,\n    height: 0,\n  };\n  if (arguments.length >= 4) {\n    node.rank = rank;\n    node.order = order;\n  }\n  return addDummyNode(g, 'border', node, prefix);\n}\n\nfunction maxRank(g) {\n  return _.max(\n    _.map(g.nodes(), function (v) {\n      var rank = g.node(v).rank;\n      if (!_.isUndefined(rank)) {\n        return rank;\n      }\n    })\n  );\n}\n\n/*\n * Partition a collection into two groups: `lhs` and `rhs`. If the supplied\n * function returns true for an entry it goes into `lhs`. Otherwise it goes\n * into `rhs.\n */\nfunction partition(collection, fn) {\n  var result = { lhs: [], rhs: [] };\n  _.forEach(collection, function (value) {\n    if (fn(value)) {\n      result.lhs.push(value);\n    } else {\n      result.rhs.push(value);\n    }\n  });\n  return result;\n}\n\n/*\n * Returns a new function that wraps `fn` with a timer. The wrapper logs the\n * time it takes to execute the function.\n */\nfunction time(name, fn) {\n  var start = _.now();\n  try {\n    return fn();\n  } finally {\n    console.log(name + ' time: ' + (_.now() - start) + 'ms');\n  }\n}\n\nfunction notime(name, fn) {\n  return fn();\n}\n","import * as _ from 'lodash-es';\n\nexport { adjust, undo };\n\nfunction adjust(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapWidthHeight(g);\n  }\n}\n\nfunction undo(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'bt' || rankDir === 'rl') {\n    reverseY(g);\n  }\n\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapXY(g);\n    swapWidthHeight(g);\n  }\n}\n\nfunction swapWidthHeight(g) {\n  _.forEach(g.nodes(), function (v) {\n    swapWidthHeightOne(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    swapWidthHeightOne(g.edge(e));\n  });\n}\n\nfunction swapWidthHeightOne(attrs) {\n  var w = attrs.width;\n  attrs.width = attrs.height;\n  attrs.height = w;\n}\n\nfunction reverseY(g) {\n  _.forEach(g.nodes(), function (v) {\n    reverseYOne(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, reverseYOne);\n    if (_.has(edge, 'y')) {\n      reverseYOne(edge);\n    }\n  });\n}\n\nfunction reverseYOne(attrs) {\n  attrs.y = -attrs.y;\n}\n\nfunction swapXY(g) {\n  _.forEach(g.nodes(), function (v) {\n    swapXYOne(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, swapXYOne);\n    if (_.has(edge, 'x')) {\n      swapXYOne(edge);\n    }\n  });\n}\n\nfunction swapXYOne(attrs) {\n  var x = attrs.x;\n  attrs.x = attrs.y;\n  attrs.y = x;\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, undo };\n\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */\nfunction run(g) {\n  g.graph().dummyChains = [];\n  _.forEach(g.edges(), function (edge) {\n    normalizeEdge(g, edge);\n  });\n}\n\nfunction normalizeEdge(g, e) {\n  var v = e.v;\n  var vRank = g.node(v).rank;\n  var w = e.w;\n  var wRank = g.node(w).rank;\n  var name = e.name;\n  var edgeLabel = g.edge(e);\n  var labelRank = edgeLabel.labelRank;\n\n  if (wRank === vRank + 1) return;\n\n  g.removeEdge(e);\n\n  var dummy, attrs, i;\n  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\n    edgeLabel.points = [];\n    attrs = {\n      width: 0,\n      height: 0,\n      edgeLabel: edgeLabel,\n      edgeObj: e,\n      rank: vRank,\n    };\n    dummy = util.addDummyNode(g, 'edge', attrs, '_d');\n    if (vRank === labelRank) {\n      attrs.width = edgeLabel.width;\n      attrs.height = edgeLabel.height;\n      // @ts-expect-error\n      attrs.dummy = 'edge-label';\n      // @ts-expect-error\n      attrs.labelpos = edgeLabel.labelpos;\n    }\n    g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);\n    if (i === 0) {\n      g.graph().dummyChains.push(dummy);\n    }\n    v = dummy;\n  }\n\n  g.setEdge(v, w, { weight: edgeLabel.weight }, name);\n}\n\nfunction undo(g) {\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var origLabel = node.edgeLabel;\n    var w;\n    g.setEdge(node.edgeObj, origLabel);\n    while (node.dummy) {\n      w = g.successors(v)[0];\n      g.removeNode(v);\n      origLabel.points.push({ x: node.x, y: node.y });\n      if (node.dummy === 'edge-label') {\n        origLabel.x = node.x;\n        origLabel.y = node.y;\n        origLabel.width = node.width;\n        origLabel.height = node.height;\n      }\n      v = w;\n      node = g.node(v);\n    }\n  });\n}\n","import { feasibleTree } from './feasible-tree.js';\nimport { networkSimplex } from './network-simplex.js';\nimport { longestPath } from './util.js';\n\nexport { rank };\n\n/*\n * Assigns a rank to each node in the input graph that respects the \"minlen\"\n * constraint specified on edges between nodes.\n *\n * This basic structure is derived from Gansner, et al., \"A Technique for\n * Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a connected DAG\n *    2. Graph nodes must be objects\n *    3. Graph edges must have \"weight\" and \"minlen\" attributes\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have a \"rank\" attribute based on the results of the\n *       algorithm. Ranks can start at any index (including negative), we'll\n *       fix them up later.\n */\nfunction rank(g) {\n  switch (g.graph().ranker) {\n    case 'network-simplex':\n      networkSimplexRanker(g);\n      break;\n    case 'tight-tree':\n      tightTreeRanker(g);\n      break;\n    case 'longest-path':\n      longestPathRanker(g);\n      break;\n    default:\n      networkSimplexRanker(g);\n  }\n}\n\n// A fast and simple ranker, but results are far from optimal.\nvar longestPathRanker = longestPath;\n\nfunction tightTreeRanker(g) {\n  longestPath(g);\n  feasibleTree(g);\n}\n\nfunction networkSimplexRanker(g) {\n  networkSimplex(g);\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport { slack } from './util.js';\n\nexport { feasibleTree };\n\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\nfunction feasibleTree(g) {\n  var t = new Graph({ directed: false });\n\n  // Choose arbitrary node from which to start our tree\n  var start = g.nodes()[0];\n  var size = g.nodeCount();\n  t.setNode(start, {});\n\n  var edge, delta;\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n\n  return t;\n}\n\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\nfunction tightTree(t, g) {\n  function dfs(v) {\n    _.forEach(g.nodeEdges(v), function (e) {\n      var edgeV = e.v,\n        w = v === edgeV ? e.w : edgeV;\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs(w);\n      }\n    });\n  }\n\n  _.forEach(t.nodes(), dfs);\n  return t.nodeCount();\n}\n\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\nfunction findMinSlackEdge(t, g) {\n  return _.minBy(g.edges(), function (e) {\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\n      return slack(g, e);\n    }\n  });\n}\n\nfunction shiftRanks(t, g, delta) {\n  _.forEach(t.nodes(), function (v) {\n    g.node(v).rank += delta;\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { longestPath, slack };\n\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\nfunction longestPath(g) {\n  var visited = {};\n\n  function dfs(v) {\n    var label = g.node(v);\n    if (_.has(visited, v)) {\n      return label.rank;\n    }\n    visited[v] = true;\n\n    var rank = _.min(\n      _.map(g.outEdges(v), function (e) {\n        return dfs(e.w) - g.edge(e).minlen;\n      })\n    );\n\n    if (\n      rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\n      rank === undefined || // return value of _.map([]) for Lodash 4\n      rank === null\n    ) {\n      // return value of _.map([null])\n      rank = 0;\n    }\n\n    return (label.rank = rank);\n  }\n\n  _.forEach(g.sources(), dfs);\n}\n\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\nfunction slack(g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}\n","import * as _ from 'lodash-es';\nimport * as alg from '../../graphlib/alg/index.js';\nimport { simplify } from '../util.js';\nimport { feasibleTree } from './feasible-tree.js';\nimport { longestPath, slack } from './util.js';\n\nexport { networkSimplex };\n\n// Expose some internals for testing purposes\nnetworkSimplex.initLowLimValues = initLowLimValues;\nnetworkSimplex.initCutValues = initCutValues;\nnetworkSimplex.calcCutValue = calcCutValue;\nnetworkSimplex.leaveEdge = leaveEdge;\nnetworkSimplex.enterEdge = enterEdge;\nnetworkSimplex.exchangeEdges = exchangeEdges;\n\n/*\n * The network simplex algorithm assigns ranks to each node in the input graph\n * and iteratively improves the ranking to reduce the length of edges.\n *\n * Preconditions:\n *\n *    1. The input graph must be a DAG.\n *    2. All nodes in the graph must have an object value.\n *    3. All edges in the graph must have \"minlen\" and \"weight\" attributes.\n *\n * Postconditions:\n *\n *    1. All nodes in the graph will have an assigned \"rank\" attribute that has\n *       been optimized by the network simplex algorithm. Ranks start at 0.\n *\n *\n * A rough sketch of the algorithm is as follows:\n *\n *    1. Assign initial ranks to each node. We use the longest path algorithm,\n *       which assigns ranks to the lowest position possible. In general this\n *       leads to very wide bottom ranks and unnecessarily long edges.\n *    2. Construct a feasible tight tree. A tight tree is one such that all\n *       edges in the tree have no slack (difference between length of edge\n *       and minlen for the edge). This by itself greatly improves the assigned\n *       rankings by shorting edges.\n *    3. Iteratively find edges that have negative cut values. Generally a\n *       negative cut value indicates that the edge could be removed and a new\n *       tree edge could be added to produce a more compact graph.\n *\n * Much of the algorithms here are derived from Gansner, et al., \"A Technique\n * for Drawing Directed Graphs.\" The structure of the file roughly follows the\n * structure of the overall algorithm.\n */\nfunction networkSimplex(g) {\n  g = simplify(g);\n  longestPath(g);\n  var t = feasibleTree(g);\n  initLowLimValues(t);\n  initCutValues(t, g);\n\n  var e, f;\n  while ((e = leaveEdge(t))) {\n    f = enterEdge(t, g, e);\n    exchangeEdges(t, g, e, f);\n  }\n}\n\n/*\n * Initializes cut values for all edges in the tree.\n */\nfunction initCutValues(t, g) {\n  var vs = alg.postorder(t, t.nodes());\n  vs = vs.slice(0, vs.length - 1);\n  _.forEach(vs, function (v) {\n    assignCutValue(t, g, v);\n  });\n}\n\nfunction assignCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);\n}\n\n/*\n * Given the tight tree, its graph, and a child in the graph calculate and\n * return the cut value for the edge between the child and its parent.\n */\nfunction calcCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  // True if the child is on the tail end of the edge in the directed graph\n  var childIsTail = true;\n  // The graph's view of the tree edge we're inspecting\n  var graphEdge = g.edge(child, parent);\n  // The accumulated cut value for the edge between this node and its parent\n  var cutValue = 0;\n\n  if (!graphEdge) {\n    childIsTail = false;\n    graphEdge = g.edge(parent, child);\n  }\n\n  cutValue = graphEdge.weight;\n\n  _.forEach(g.nodeEdges(child), function (e) {\n    var isOutEdge = e.v === child,\n      other = isOutEdge ? e.w : e.v;\n\n    if (other !== parent) {\n      var pointsToHead = isOutEdge === childIsTail,\n        otherWeight = g.edge(e).weight;\n\n      cutValue += pointsToHead ? otherWeight : -otherWeight;\n      if (isTreeEdge(t, child, other)) {\n        var otherCutValue = t.edge(child, other).cutvalue;\n        cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n      }\n    }\n  });\n\n  return cutValue;\n}\n\nfunction initLowLimValues(tree, root) {\n  if (arguments.length < 2) {\n    root = tree.nodes()[0];\n  }\n  dfsAssignLowLim(tree, {}, 1, root);\n}\n\nfunction dfsAssignLowLim(tree, visited, nextLim, v, parent) {\n  var low = nextLim;\n  var label = tree.node(v);\n\n  visited[v] = true;\n  _.forEach(tree.neighbors(v), function (w) {\n    if (!_.has(visited, w)) {\n      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);\n    }\n  });\n\n  label.low = low;\n  label.lim = nextLim++;\n  if (parent) {\n    label.parent = parent;\n  } else {\n    // TODO should be able to remove this when we incrementally update low lim\n    delete label.parent;\n  }\n\n  return nextLim;\n}\n\nfunction leaveEdge(tree) {\n  return _.find(tree.edges(), function (e) {\n    return tree.edge(e).cutvalue < 0;\n  });\n}\n\nfunction enterEdge(t, g, edge) {\n  var v = edge.v;\n  var w = edge.w;\n\n  // For the rest of this function we assume that v is the tail and w is the\n  // head, so if we don't have this edge in the graph we should flip it to\n  // match the correct orientation.\n  if (!g.hasEdge(v, w)) {\n    v = edge.w;\n    w = edge.v;\n  }\n\n  var vLabel = t.node(v);\n  var wLabel = t.node(w);\n  var tailLabel = vLabel;\n  var flip = false;\n\n  // If the root is in the tail of the edge then we need to flip the logic that\n  // checks for the head and tail nodes in the candidates function below.\n  if (vLabel.lim > wLabel.lim) {\n    tailLabel = wLabel;\n    flip = true;\n  }\n\n  var candidates = _.filter(g.edges(), function (edge) {\n    return (\n      flip === isDescendant(t, t.node(edge.v), tailLabel) &&\n      flip !== isDescendant(t, t.node(edge.w), tailLabel)\n    );\n  });\n\n  return _.minBy(candidates, function (edge) {\n    return slack(g, edge);\n  });\n}\n\nfunction exchangeEdges(t, g, e, f) {\n  var v = e.v;\n  var w = e.w;\n  t.removeEdge(v, w);\n  t.setEdge(f.v, f.w, {});\n  initLowLimValues(t);\n  initCutValues(t, g);\n  updateRanks(t, g);\n}\n\nfunction updateRanks(t, g) {\n  var root = _.find(t.nodes(), function (v) {\n    return !g.node(v).parent;\n  });\n  var vs = alg.preorder(t, root);\n  vs = vs.slice(1);\n  _.forEach(vs, function (v) {\n    var parent = t.node(v).parent,\n      edge = g.edge(v, parent),\n      flipped = false;\n\n    if (!edge) {\n      edge = g.edge(parent, v);\n      flipped = true;\n    }\n\n    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);\n  });\n}\n\n/*\n * Returns true if the edge is in the tree.\n */\nfunction isTreeEdge(tree, u, v) {\n  return tree.hasEdge(u, v);\n}\n\n/*\n * Returns true if the specified node is descendant of the root node per the\n * assigned low and lim attributes in the tree.\n */\nfunction isDescendant(tree, vLabel, rootLabel) {\n  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;\n}\n","import { components } from './components.js';\nimport { dijkstra } from './dijkstra.js';\nimport { dijkstraAll } from './dijkstra-all.js';\nimport { findCycles } from './find-cycles.js';\nimport { floydWarshall } from './floyd-warshall.js';\nimport { isAcyclic } from './is-acyclic.js';\nimport { postorder } from './postorder.js';\nimport { preorder } from './preorder.js';\nimport { prim } from './prim.js';\nimport { tarjan } from './tarjan.js';\nimport { topsort } from './topsort.js';\n\nexport {\n  components,\n  dijkstra,\n  dijkstraAll,\n  findCycles,\n  floydWarshall,\n  isAcyclic,\n  postorder,\n  preorder,\n  prim,\n  tarjan,\n  topsort,\n};\n","import * as _ from 'lodash-es';\n\nexport { components };\n\nfunction components(g) {\n  var visited = {};\n  var cmpts = [];\n  var cmpt;\n\n  function dfs(v) {\n    if (_.has(visited, v)) return;\n    visited[v] = true;\n    cmpt.push(v);\n    _.each(g.successors(v), dfs);\n    _.each(g.predecessors(v), dfs);\n  }\n\n  _.each(g.nodes(), function (v) {\n    cmpt = [];\n    dfs(v);\n    if (cmpt.length) {\n      cmpts.push(cmpt);\n    }\n  });\n\n  return cmpts;\n}\n","import * as _ from 'lodash-es';\nimport { PriorityQueue } from '../data/priority-queue.js';\n\nexport { dijkstra };\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction dijkstra(g, source, weightFn, edgeFn) {\n  return runDijkstra(\n    g,\n    String(source),\n    weightFn || DEFAULT_WEIGHT_FUNC,\n    edgeFn ||\n      function (v) {\n        return g.outEdges(v);\n      }\n  );\n}\n\nfunction runDijkstra(g, source, weightFn, edgeFn) {\n  var results = {};\n  var pq = new PriorityQueue();\n  var v, vEntry;\n\n  var updateNeighbors = function (edge) {\n    var w = edge.v !== v ? edge.v : edge.w;\n    var wEntry = results[w];\n    var weight = weightFn(edge);\n    var distance = vEntry.distance + weight;\n\n    if (weight < 0) {\n      throw new Error(\n        'dijkstra does not allow negative edge weights. ' +\n          'Bad edge: ' +\n          edge +\n          ' Weight: ' +\n          weight\n      );\n    }\n\n    if (distance < wEntry.distance) {\n      wEntry.distance = distance;\n      wEntry.predecessor = v;\n      pq.decrease(w, distance);\n    }\n  };\n\n  g.nodes().forEach(function (v) {\n    var distance = v === source ? 0 : Number.POSITIVE_INFINITY;\n    results[v] = { distance: distance };\n    pq.add(v, distance);\n  });\n\n  while (pq.size() > 0) {\n    v = pq.removeMin();\n    vEntry = results[v];\n    if (vEntry.distance === Number.POSITIVE_INFINITY) {\n      break;\n    }\n\n    edgeFn(v).forEach(updateNeighbors);\n  }\n\n  return results;\n}\n","import * as _ from 'lodash-es';\n\nexport { PriorityQueue };\n\n/**\n * A min-priority queue data structure. This algorithm is derived from Cormen,\n * et al., \"Introduction to Algorithms\". The basic idea of a min-priority\n * queue is that you can efficiently (in O(1) time) get the smallest key in\n * the queue. Adding and removing elements takes O(log n) time. A key can\n * have its priority decreased in O(log n) time.\n */\nclass PriorityQueue {\n  constructor() {\n    this._arr = [];\n    this._keyIndices = {};\n  }\n  /**\n   * Returns the number of elements in the queue. Takes `O(1)` time.\n   */\n  size() {\n    return this._arr.length;\n  }\n  /**\n   * Returns the keys that are in the queue. Takes `O(n)` time.\n   */\n  keys() {\n    return this._arr.map(function (x) {\n      return x.key;\n    });\n  }\n  /**\n   * Returns `true` if **key** is in the queue and `false` if not.\n   */\n  has(key) {\n    return _.has(this._keyIndices, key);\n  }\n  /**\n   * Returns the priority for **key**. If **key** is not present in the queue\n   * then this function returns `undefined`. Takes `O(1)` time.\n   *\n   * @param {Object} key\n   */\n  priority(key) {\n    var index = this._keyIndices[key];\n    if (index !== undefined) {\n      return this._arr[index].priority;\n    }\n  }\n  /**\n   * Returns the key for the minimum element in this queue. If the queue is\n   * empty this function throws an Error. Takes `O(1)` time.\n   */\n  min() {\n    if (this.size() === 0) {\n      throw new Error('Queue underflow');\n    }\n    return this._arr[0].key;\n  }\n  /**\n   * Inserts a new key into the priority queue. If the key already exists in\n   * the queue this function returns `false`; otherwise it will return `true`.\n   * Takes `O(n)` time.\n   *\n   * @param {Object} key the key to add\n   * @param {Number} priority the initial priority for the key\n   */\n  add(key, priority) {\n    var keyIndices = this._keyIndices;\n    key = String(key);\n    if (!_.has(keyIndices, key)) {\n      var arr = this._arr;\n      var index = arr.length;\n      keyIndices[key] = index;\n      arr.push({ key: key, priority: priority });\n      this._decrease(index);\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Removes and returns the smallest key in the queue. Takes `O(log n)` time.\n   */\n  removeMin() {\n    this._swap(0, this._arr.length - 1);\n    var min = this._arr.pop();\n    delete this._keyIndices[min.key];\n    this._heapify(0);\n    return min.key;\n  }\n  /**\n   * Decreases the priority for **key** to **priority**. If the new priority is\n   * greater than the previous priority, this function will throw an Error.\n   *\n   * @param {Object} key the key for which to raise priority\n   * @param {Number} priority the new priority for the key\n   */\n  decrease(key, priority) {\n    var index = this._keyIndices[key];\n    if (priority > this._arr[index].priority) {\n      throw new Error(\n        'New priority is greater than current priority. ' +\n          'Key: ' +\n          key +\n          ' Old: ' +\n          this._arr[index].priority +\n          ' New: ' +\n          priority\n      );\n    }\n    this._arr[index].priority = priority;\n    this._decrease(index);\n  }\n  _heapify(i) {\n    var arr = this._arr;\n    var l = 2 * i;\n    var r = l + 1;\n    var largest = i;\n    if (l < arr.length) {\n      largest = arr[l].priority < arr[largest].priority ? l : largest;\n      if (r < arr.length) {\n        largest = arr[r].priority < arr[largest].priority ? r : largest;\n      }\n      if (largest !== i) {\n        this._swap(i, largest);\n        this._heapify(largest);\n      }\n    }\n  }\n  _decrease(index) {\n    var arr = this._arr;\n    var priority = arr[index].priority;\n    var parent;\n    while (index !== 0) {\n      parent = index >> 1;\n      if (arr[parent].priority < priority) {\n        break;\n      }\n      this._swap(index, parent);\n      index = parent;\n    }\n  }\n  _swap(i, j) {\n    var arr = this._arr;\n    var keyIndices = this._keyIndices;\n    var origArrI = arr[i];\n    var origArrJ = arr[j];\n    arr[i] = origArrJ;\n    arr[j] = origArrI;\n    keyIndices[origArrJ.key] = i;\n    keyIndices[origArrI.key] = j;\n  }\n}\n","import * as _ from 'lodash-es';\nimport { dijkstra } from './dijkstra.js';\n\nexport { dijkstraAll };\n\nfunction dijkstraAll(g, weightFunc, edgeFunc) {\n  return _.transform(\n    g.nodes(),\n    function (acc, v) {\n      acc[v] = dijkstra(g, v, weightFunc, edgeFunc);\n    },\n    {}\n  );\n}\n","import * as _ from 'lodash-es';\nimport { tarjan } from './tarjan.js';\n\nexport { findCycles };\n\nfunction findCycles(g) {\n  return _.filter(tarjan(g), function (cmpt) {\n    return cmpt.length > 1 || (cmpt.length === 1 && g.hasEdge(cmpt[0], cmpt[0]));\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { tarjan };\n\nfunction tarjan(g) {\n  var index = 0;\n  var stack = [];\n  var visited = {}; // node id -> { onStack, lowlink, index }\n  var results = [];\n\n  function dfs(v) {\n    var entry = (visited[v] = {\n      onStack: true,\n      lowlink: index,\n      index: index++,\n    });\n    stack.push(v);\n\n    g.successors(v).forEach(function (w) {\n      if (!_.has(visited, w)) {\n        dfs(w);\n        entry.lowlink = Math.min(entry.lowlink, visited[w].lowlink);\n      } else if (visited[w].onStack) {\n        entry.lowlink = Math.min(entry.lowlink, visited[w].index);\n      }\n    });\n\n    if (entry.lowlink === entry.index) {\n      var cmpt = [];\n      var w;\n      do {\n        w = stack.pop();\n        visited[w].onStack = false;\n        cmpt.push(w);\n      } while (v !== w);\n      results.push(cmpt);\n    }\n  }\n\n  g.nodes().forEach(function (v) {\n    if (!_.has(visited, v)) {\n      dfs(v);\n    }\n  });\n\n  return results;\n}\n","import * as _ from 'lodash-es';\n\nexport { floydWarshall };\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction floydWarshall(g, weightFn, edgeFn) {\n  return runFloydWarshall(\n    g,\n    weightFn || DEFAULT_WEIGHT_FUNC,\n    edgeFn ||\n      function (v) {\n        return g.outEdges(v);\n      }\n  );\n}\n\nfunction runFloydWarshall(g, weightFn, edgeFn) {\n  var results = {};\n  var nodes = g.nodes();\n\n  nodes.forEach(function (v) {\n    results[v] = {};\n    results[v][v] = { distance: 0 };\n    nodes.forEach(function (w) {\n      if (v !== w) {\n        results[v][w] = { distance: Number.POSITIVE_INFINITY };\n      }\n    });\n    edgeFn(v).forEach(function (edge) {\n      var w = edge.v === v ? edge.w : edge.v;\n      var d = weightFn(edge);\n      results[v][w] = { distance: d, predecessor: v };\n    });\n  });\n\n  nodes.forEach(function (k) {\n    var rowK = results[k];\n    nodes.forEach(function (i) {\n      var rowI = results[i];\n      nodes.forEach(function (j) {\n        var ik = rowI[k];\n        var kj = rowK[j];\n        var ij = rowI[j];\n        var altDistance = ik.distance + kj.distance;\n        if (altDistance < ij.distance) {\n          ij.distance = altDistance;\n          ij.predecessor = kj.predecessor;\n        }\n      });\n    });\n  });\n\n  return results;\n}\n","import { topsort, CycleException } from './topsort.js';\n\nexport { isAcyclic };\n\nfunction isAcyclic(g) {\n  try {\n    topsort(g);\n  } catch (e) {\n    if (e instanceof CycleException) {\n      return false;\n    }\n    throw e;\n  }\n  return true;\n}\n","import * as _ from 'lodash-es';\n\nexport { topsort, CycleException };\n\ntopsort.CycleException = CycleException;\n\nfunction topsort(g) {\n  var visited = {};\n  var stack = {};\n  var results = [];\n\n  function visit(node) {\n    if (_.has(stack, node)) {\n      throw new CycleException();\n    }\n\n    if (!_.has(visited, node)) {\n      stack[node] = true;\n      visited[node] = true;\n      _.each(g.predecessors(node), visit);\n      delete stack[node];\n      results.push(node);\n    }\n  }\n\n  _.each(g.sinks(), visit);\n\n  if (_.size(visited) !== g.nodeCount()) {\n    throw new CycleException();\n  }\n\n  return results;\n}\n\nfunction CycleException() {}\nCycleException.prototype = new Error(); // must be an instance of Error to pass testing\n","import { dfs } from './dfs.js';\n\nexport { postorder };\n\nfunction postorder(g, vs) {\n  return dfs(g, vs, 'post');\n}\n","import * as _ from 'lodash-es';\n\nexport { dfs };\n\n/*\n * A helper that preforms a pre- or post-order traversal on the input graph\n * and returns the nodes in the order they were visited. If the graph is\n * undirected then this algorithm will navigate using neighbors. If the graph\n * is directed then this algorithm will navigate using successors.\n *\n * Order must be one of \"pre\" or \"post\".\n */\nfunction dfs(g, vs, order) {\n  if (!_.isArray(vs)) {\n    vs = [vs];\n  }\n\n  var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);\n\n  var acc = [];\n  var visited = {};\n  _.each(vs, function (v) {\n    if (!g.hasNode(v)) {\n      throw new Error('Graph does not have node: ' + v);\n    }\n\n    doDfs(g, v, order === 'post', visited, navigation, acc);\n  });\n  return acc;\n}\n\nfunction doDfs(g, v, postorder, visited, navigation, acc) {\n  if (!_.has(visited, v)) {\n    visited[v] = true;\n\n    if (!postorder) {\n      acc.push(v);\n    }\n    _.each(navigation(v), function (w) {\n      doDfs(g, w, postorder, visited, navigation, acc);\n    });\n    if (postorder) {\n      acc.push(v);\n    }\n  }\n}\n","import { dfs } from './dfs.js';\n\nexport { preorder };\n\nfunction preorder(g, vs) {\n  return dfs(g, vs, 'pre');\n}\n","import * as _ from 'lodash-es';\nimport { PriorityQueue } from '../data/priority-queue.js';\nimport { Graph } from '../graph.js';\n\nexport { prim };\n\nfunction prim(g, weightFunc) {\n  var result = new Graph();\n  var parents = {};\n  var pq = new PriorityQueue();\n  var v;\n\n  function updateNeighbors(edge) {\n    var w = edge.v === v ? edge.w : edge.v;\n    var pri = pq.priority(w);\n    if (pri !== undefined) {\n      var edgeWeight = weightFunc(edge);\n      if (edgeWeight < pri) {\n        parents[w] = v;\n        pq.decrease(w, edgeWeight);\n      }\n    }\n  }\n\n  if (g.nodeCount() === 0) {\n    return result;\n  }\n\n  _.each(g.nodes(), function (v) {\n    pq.add(v, Number.POSITIVE_INFINITY);\n    result.setNode(v);\n  });\n\n  // Start from an arbitrary node\n  pq.decrease(g.nodes()[0], 0);\n\n  var init = false;\n  while (pq.size() > 0) {\n    v = pq.removeMin();\n    if (_.has(parents, v)) {\n      result.setEdge(v, parents[v]);\n    } else if (init) {\n      throw new Error('Input graph is not connected: ' + g);\n    } else {\n      init = true;\n    }\n\n    g.nodeEdges(v).forEach(updateNeighbors);\n  }\n\n  return result;\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, cleanup };\n\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */\nfunction run(g) {\n  var root = util.addDummyNode(g, 'root', {}, '_root');\n  var depths = treeDepths(g);\n  var height = _.max(_.values(depths)) - 1; // Note: depths is an Object not an array\n  var nodeSep = 2 * height + 1;\n\n  g.graph().nestingRoot = root;\n\n  // Multiply minlen by nodeSep to align nodes on non-border ranks.\n  _.forEach(g.edges(), function (e) {\n    g.edge(e).minlen *= nodeSep;\n  });\n\n  // Calculate a weight that is sufficient to keep subgraphs vertically compact\n  var weight = sumWeights(g) + 1;\n\n  // Create border nodes and link them up\n  _.forEach(g.children(), function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n  });\n\n  // Save the multiplier for node layers for later removal of empty border\n  // layers.\n  g.graph().nodeRankFactor = nodeSep;\n}\n\nfunction dfs(g, root, nodeSep, weight, height, depths, v) {\n  var children = g.children(v);\n  if (!children.length) {\n    if (v !== root) {\n      g.setEdge(root, v, { weight: 0, minlen: nodeSep });\n    }\n    return;\n  }\n\n  var top = util.addBorderNode(g, '_bt');\n  var bottom = util.addBorderNode(g, '_bb');\n  var label = g.node(v);\n\n  g.setParent(top, v);\n  label.borderTop = top;\n  g.setParent(bottom, v);\n  label.borderBottom = bottom;\n\n  _.forEach(children, function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n\n    var childNode = g.node(child);\n    var childTop = childNode.borderTop ? childNode.borderTop : child;\n    var childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n    var thisWeight = childNode.borderTop ? weight : 2 * weight;\n    var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n\n    g.setEdge(top, childTop, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n\n    g.setEdge(childBottom, bottom, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n  });\n\n  if (!g.parent(v)) {\n    g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });\n  }\n}\n\nfunction treeDepths(g) {\n  var depths = {};\n  function dfs(v, depth) {\n    var children = g.children(v);\n    if (children && children.length) {\n      _.forEach(children, function (child) {\n        dfs(child, depth + 1);\n      });\n    }\n    depths[v] = depth;\n  }\n  _.forEach(g.children(), function (v) {\n    dfs(v, 1);\n  });\n  return depths;\n}\n\nfunction sumWeights(g) {\n  return _.reduce(\n    g.edges(),\n    function (acc, e) {\n      return acc + g.edge(e).weight;\n    },\n    0\n  );\n}\n\nfunction cleanup(g) {\n  var graphLabel = g.graph();\n  g.removeNode(graphLabel.nestingRoot);\n  delete graphLabel.nestingRoot;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.nestingEdge) {\n      g.removeEdge(e);\n    }\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\nimport { addSubgraphConstraints } from './add-subgraph-constraints.js';\nimport { buildLayerGraph } from './build-layer-graph.js';\nimport { crossCount } from './cross-count.js';\nimport { initOrder } from './init-order.js';\nimport { sortSubgraph } from './sort-subgraph.js';\n\nexport { order };\n\n/*\n * Applies heuristics to minimize edge crossings in the graph and sets the best\n * order solution as an order attribute on each node.\n *\n * Pre-conditions:\n *\n *    1. Graph must be DAG\n *    2. Graph nodes must be objects with a \"rank\" attribute\n *    3. Graph edges must have the \"weight\" attribute\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\n *       algorithm.\n */\nfunction order(g) {\n  var maxRank = util.maxRank(g),\n    downLayerGraphs = buildLayerGraphs(g, _.range(1, maxRank + 1), 'inEdges'),\n    upLayerGraphs = buildLayerGraphs(g, _.range(maxRank - 1, -1, -1), 'outEdges');\n\n  var layering = initOrder(g);\n  assignOrder(g, layering);\n\n  var bestCC = Number.POSITIVE_INFINITY,\n    best;\n\n  for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);\n\n    layering = util.buildLayerMatrix(g);\n    var cc = crossCount(g, layering);\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = _.cloneDeep(layering);\n      bestCC = cc;\n    }\n  }\n\n  assignOrder(g, best);\n}\n\nfunction buildLayerGraphs(g, ranks, relationship) {\n  return _.map(ranks, function (rank) {\n    return buildLayerGraph(g, rank, relationship);\n  });\n}\n\nfunction sweepLayerGraphs(layerGraphs, biasRight) {\n  var cg = new Graph();\n  _.forEach(layerGraphs, function (lg) {\n    var root = lg.graph().root;\n    var sorted = sortSubgraph(lg, root, cg, biasRight);\n    _.forEach(sorted.vs, function (v, i) {\n      lg.node(v).order = i;\n    });\n    addSubgraphConstraints(lg, cg, sorted.vs);\n  });\n}\n\nfunction assignOrder(g, layering) {\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, i) {\n      g.node(v).order = i;\n    });\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { addSubgraphConstraints };\n\nfunction addSubgraphConstraints(g, cg, vs) {\n  var prev = {},\n    rootPrev;\n\n  _.forEach(vs, function (v) {\n    var child = g.parent(v),\n      parent,\n      prevChild;\n    while (child) {\n      parent = g.parent(child);\n      if (parent) {\n        prevChild = prev[parent];\n        prev[parent] = child;\n      } else {\n        prevChild = rootPrev;\n        rootPrev = child;\n      }\n      if (prevChild && prevChild !== child) {\n        cg.setEdge(prevChild, child);\n        return;\n      }\n      child = parent;\n    }\n  });\n\n  /*\n  function dfs(v) {\n    var children = v ? g.children(v) : g.children();\n    if (children.length) {\n      var min = Number.POSITIVE_INFINITY,\n          subgraphs = [];\n      _.each(children, function(child) {\n        var childMin = dfs(child);\n        if (g.children(child).length) {\n          subgraphs.push({ v: child, order: childMin });\n        }\n        min = Math.min(min, childMin);\n      });\n      _.reduce(_.sortBy(subgraphs, \"order\"), function(prev, curr) {\n        cg.setEdge(prev.v, curr.v);\n        return curr;\n      });\n      return min;\n    }\n    return g.node(v).order;\n  }\n  dfs(undefined);\n  */\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\n\nexport { buildLayerGraph };\n\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */\nfunction buildLayerGraph(g, rank, relationship) {\n  var root = createRootNode(g),\n    result = new Graph({ compound: true })\n      .setGraph({ root: root })\n      .setDefaultNodeLabel(function (v) {\n        return g.node(v);\n      });\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v),\n      parent = g.parent(v);\n\n    if (node.rank === rank || (node.minRank <= rank && rank <= node.maxRank)) {\n      result.setNode(v);\n      result.setParent(v, parent || root);\n\n      // This assumes we have only short edges!\n      _.forEach(g[relationship](v), function (e) {\n        var u = e.v === v ? e.w : e.v,\n          edge = result.edge(u, v),\n          weight = !_.isUndefined(edge) ? edge.weight : 0;\n        result.setEdge(u, v, { weight: g.edge(e).weight + weight });\n      });\n\n      if (_.has(node, 'minRank')) {\n        result.setNode(v, {\n          borderLeft: node.borderLeft[rank],\n          borderRight: node.borderRight[rank],\n        });\n      }\n    }\n  });\n\n  return result;\n}\n\nfunction createRootNode(g) {\n  var v;\n  while (g.hasNode((v = _.uniqueId('_root'))));\n  return v;\n}\n","import * as _ from 'lodash-es';\n\nexport { crossCount };\n\n/*\n * A function that takes a layering (an array of layers, each with an array of\n * ordererd nodes) and a graph and returns a weighted crossing count.\n *\n * Pre-conditions:\n *\n *    1. Input graph must be simple (not a multigraph), directed, and include\n *       only simple edges.\n *    2. Edges in the input graph must have assigned weights.\n *\n * Post-conditions:\n *\n *    1. The graph and layering matrix are left unchanged.\n *\n * This algorithm is derived from Barth, et al., \"Bilayer Cross Counting.\"\n */\nfunction crossCount(g, layering) {\n  var cc = 0;\n  for (var i = 1; i < layering.length; ++i) {\n    cc += twoLayerCrossCount(g, layering[i - 1], layering[i]);\n  }\n  return cc;\n}\n\nfunction twoLayerCrossCount(g, northLayer, southLayer) {\n  // Sort all of the edges between the north and south layers by their position\n  // in the north layer and then the south. Map these edges to the position of\n  // their head in the south layer.\n  var southPos = _.zipObject(\n    southLayer,\n    _.map(southLayer, function (v, i) {\n      return i;\n    })\n  );\n  var southEntries = _.flatten(\n    _.map(northLayer, function (v) {\n      return _.sortBy(\n        _.map(g.outEdges(v), function (e) {\n          return { pos: southPos[e.w], weight: g.edge(e).weight };\n        }),\n        'pos'\n      );\n    })\n  );\n\n  // Build the accumulator tree\n  var firstIndex = 1;\n  while (firstIndex < southLayer.length) firstIndex <<= 1;\n  var treeSize = 2 * firstIndex - 1;\n  firstIndex -= 1;\n  var tree = _.map(new Array(treeSize), function () {\n    return 0;\n  });\n\n  // Calculate the weighted crossings\n  var cc = 0;\n  _.forEach(\n    // @ts-expect-error\n    southEntries.forEach(function (entry) {\n      var index = entry.pos + firstIndex;\n      tree[index] += entry.weight;\n      var weightSum = 0;\n      // @ts-expect-error\n      while (index > 0) {\n        // @ts-expect-error\n        if (index % 2) {\n          weightSum += tree[index + 1];\n        }\n        // @ts-expect-error\n        index = (index - 1) >> 1;\n        tree[index] += entry.weight;\n      }\n      cc += entry.weight * weightSum;\n    })\n  );\n\n  return cc;\n}\n","import * as _ from 'lodash-es';\n\nexport { initOrder };\n\n/*\n * Assigns an initial order value for each node by performing a DFS search\n * starting from nodes in the first rank. Nodes are assigned an order in their\n * rank as they are first visited.\n *\n * This approach comes from Gansner, et al., \"A Technique for Drawing Directed\n * Graphs.\"\n *\n * Returns a layering matrix with an array per layer and each layer sorted by\n * the order of its nodes.\n */\nfunction initOrder(g) {\n  var visited = {};\n  var simpleNodes = _.filter(g.nodes(), function (v) {\n    return !g.children(v).length;\n  });\n  var maxRank = _.max(\n    _.map(simpleNodes, function (v) {\n      return g.node(v).rank;\n    })\n  );\n  var layers = _.map(_.range(maxRank + 1), function () {\n    return [];\n  });\n\n  function dfs(v) {\n    if (_.has(visited, v)) return;\n    visited[v] = true;\n    var node = g.node(v);\n    layers[node.rank].push(v);\n    _.forEach(g.successors(v), dfs);\n  }\n\n  var orderedVs = _.sortBy(simpleNodes, function (v) {\n    return g.node(v).rank;\n  });\n  _.forEach(orderedVs, dfs);\n\n  return layers;\n}\n","import * as _ from 'lodash-es';\nimport { barycenter } from './barycenter.js';\nimport { resolveConflicts } from './resolve-conflicts.js';\nimport { sort } from './sort.js';\n\nexport { sortSubgraph };\n\nfunction sortSubgraph(g, v, cg, biasRight) {\n  var movable = g.children(v);\n  var node = g.node(v);\n  var bl = node ? node.borderLeft : undefined;\n  var br = node ? node.borderRight : undefined;\n  var subgraphs = {};\n\n  if (bl) {\n    movable = _.filter(movable, function (w) {\n      return w !== bl && w !== br;\n    });\n  }\n\n  var barycenters = barycenter(g, movable);\n  _.forEach(barycenters, function (entry) {\n    if (g.children(entry.v).length) {\n      var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);\n      subgraphs[entry.v] = subgraphResult;\n      if (_.has(subgraphResult, 'barycenter')) {\n        mergeBarycenters(entry, subgraphResult);\n      }\n    }\n  });\n\n  var entries = resolveConflicts(barycenters, cg);\n  expandSubgraphs(entries, subgraphs);\n\n  var result = sort(entries, biasRight);\n\n  if (bl) {\n    result.vs = _.flatten([bl, result.vs, br]);\n    if (g.predecessors(bl).length) {\n      var blPred = g.node(g.predecessors(bl)[0]),\n        brPred = g.node(g.predecessors(br)[0]);\n      if (!_.has(result, 'barycenter')) {\n        result.barycenter = 0;\n        result.weight = 0;\n      }\n      result.barycenter =\n        (result.barycenter * result.weight + blPred.order + brPred.order) / (result.weight + 2);\n      result.weight += 2;\n    }\n  }\n\n  return result;\n}\n\nfunction expandSubgraphs(entries, subgraphs) {\n  _.forEach(entries, function (entry) {\n    entry.vs = _.flatten(\n      entry.vs.map(function (v) {\n        if (subgraphs[v]) {\n          return subgraphs[v].vs;\n        }\n        return v;\n      })\n    );\n  });\n}\n\nfunction mergeBarycenters(target, other) {\n  if (!_.isUndefined(target.barycenter)) {\n    target.barycenter =\n      (target.barycenter * target.weight + other.barycenter * other.weight) /\n      (target.weight + other.weight);\n    target.weight += other.weight;\n  } else {\n    target.barycenter = other.barycenter;\n    target.weight = other.weight;\n  }\n}\n","import * as _ from 'lodash-es';\n\nexport { barycenter };\n\nfunction barycenter(g, movable) {\n  return _.map(movable, function (v) {\n    var inV = g.inEdges(v);\n    if (!inV.length) {\n      return { v: v };\n    } else {\n      var result = _.reduce(\n        inV,\n        function (acc, e) {\n          var edge = g.edge(e),\n            nodeU = g.node(e.v);\n          return {\n            sum: acc.sum + edge.weight * nodeU.order,\n            weight: acc.weight + edge.weight,\n          };\n        },\n        { sum: 0, weight: 0 }\n      );\n\n      return {\n        v: v,\n        barycenter: result.sum / result.weight,\n        weight: result.weight,\n      };\n    }\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { resolveConflicts };\n\n/*\n * Given a list of entries of the form {v, barycenter, weight} and a\n * constraint graph this function will resolve any conflicts between the\n * constraint graph and the barycenters for the entries. If the barycenters for\n * an entry would violate a constraint in the constraint graph then we coalesce\n * the nodes in the conflict into a new node that respects the contraint and\n * aggregates barycenter and weight information.\n *\n * This implementation is based on the description in Forster, \"A Fast and\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\n * differs in some specific details.\n *\n * Pre-conditions:\n *\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\n *       no barycenter, then {v}.\n *\n * Returns:\n *\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\n *    `vs` may either be a singleton or it may be an aggregation of nodes\n *    ordered such that they do not violate constraints from the constraint\n *    graph. The property `i` is the lowest original index of any of the\n *    elements in `vs`.\n */\nfunction resolveConflicts(entries, cg) {\n  var mappedEntries = {};\n  _.forEach(entries, function (entry, i) {\n    var tmp = (mappedEntries[entry.v] = {\n      indegree: 0,\n      in: [],\n      out: [],\n      vs: [entry.v],\n      i: i,\n    });\n    if (!_.isUndefined(entry.barycenter)) {\n      // @ts-expect-error\n      tmp.barycenter = entry.barycenter;\n      // @ts-expect-error\n      tmp.weight = entry.weight;\n    }\n  });\n\n  _.forEach(cg.edges(), function (e) {\n    var entryV = mappedEntries[e.v];\n    var entryW = mappedEntries[e.w];\n    if (!_.isUndefined(entryV) && !_.isUndefined(entryW)) {\n      entryW.indegree++;\n      entryV.out.push(mappedEntries[e.w]);\n    }\n  });\n\n  var sourceSet = _.filter(mappedEntries, function (entry) {\n    // @ts-expect-error\n    return !entry.indegree;\n  });\n\n  return doResolveConflicts(sourceSet);\n}\n\nfunction doResolveConflicts(sourceSet) {\n  var entries = [];\n\n  function handleIn(vEntry) {\n    return function (uEntry) {\n      if (uEntry.merged) {\n        return;\n      }\n      if (\n        _.isUndefined(uEntry.barycenter) ||\n        _.isUndefined(vEntry.barycenter) ||\n        uEntry.barycenter >= vEntry.barycenter\n      ) {\n        mergeEntries(vEntry, uEntry);\n      }\n    };\n  }\n\n  function handleOut(vEntry) {\n    return function (wEntry) {\n      wEntry['in'].push(vEntry);\n      if (--wEntry.indegree === 0) {\n        sourceSet.push(wEntry);\n      }\n    };\n  }\n\n  while (sourceSet.length) {\n    var entry = sourceSet.pop();\n    entries.push(entry);\n    _.forEach(entry['in'].reverse(), handleIn(entry));\n    _.forEach(entry.out, handleOut(entry));\n  }\n\n  return _.map(\n    _.filter(entries, function (entry) {\n      return !entry.merged;\n    }),\n    function (entry) {\n      return _.pick(entry, ['vs', 'i', 'barycenter', 'weight']);\n    }\n  );\n}\n\nfunction mergeEntries(target, source) {\n  var sum = 0;\n  var weight = 0;\n\n  if (target.weight) {\n    sum += target.barycenter * target.weight;\n    weight += target.weight;\n  }\n\n  if (source.weight) {\n    sum += source.barycenter * source.weight;\n    weight += source.weight;\n  }\n\n  target.vs = source.vs.concat(target.vs);\n  target.barycenter = sum / weight;\n  target.weight = weight;\n  target.i = Math.min(source.i, target.i);\n  source.merged = true;\n}\n","import * as _ from 'lodash-es';\nimport * as util from '../util.js';\n\nexport { sort };\n\nfunction sort(entries, biasRight) {\n  var parts = util.partition(entries, function (entry) {\n    return _.has(entry, 'barycenter');\n  });\n  var sortable = parts.lhs,\n    unsortable = _.sortBy(parts.rhs, function (entry) {\n      return -entry.i;\n    }),\n    vs = [],\n    sum = 0,\n    weight = 0,\n    vsIndex = 0;\n\n  sortable.sort(compareWithBias(!!biasRight));\n\n  vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n\n  _.forEach(sortable, function (entry) {\n    vsIndex += entry.vs.length;\n    vs.push(entry.vs);\n    sum += entry.barycenter * entry.weight;\n    weight += entry.weight;\n    vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n  });\n\n  var result = { vs: _.flatten(vs) };\n  if (weight) {\n    result.barycenter = sum / weight;\n    result.weight = weight;\n  }\n  return result;\n}\n\nfunction consumeUnsortable(vs, unsortable, index) {\n  var last;\n  while (unsortable.length && (last = _.last(unsortable)).i <= index) {\n    unsortable.pop();\n    vs.push(last.vs);\n    index++;\n  }\n  return index;\n}\n\nfunction compareWithBias(bias) {\n  return function (entryV, entryW) {\n    if (entryV.barycenter < entryW.barycenter) {\n      return -1;\n    } else if (entryV.barycenter > entryW.barycenter) {\n      return 1;\n    }\n\n    return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;\n  };\n}\n","import * as _ from 'lodash-es';\n\nexport { parentDummyChains };\n\nfunction parentDummyChains(g) {\n  var postorderNums = postorder(g);\n\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var edgeObj = node.edgeObj;\n    var pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);\n    var path = pathData.path;\n    var lca = pathData.lca;\n    var pathIdx = 0;\n    var pathV = path[pathIdx];\n    var ascending = true;\n\n    while (v !== edgeObj.w) {\n      node = g.node(v);\n\n      if (ascending) {\n        while ((pathV = path[pathIdx]) !== lca && g.node(pathV).maxRank < node.rank) {\n          pathIdx++;\n        }\n\n        if (pathV === lca) {\n          ascending = false;\n        }\n      }\n\n      if (!ascending) {\n        while (\n          pathIdx < path.length - 1 &&\n          g.node((pathV = path[pathIdx + 1])).minRank <= node.rank\n        ) {\n          pathIdx++;\n        }\n        pathV = path[pathIdx];\n      }\n\n      g.setParent(v, pathV);\n      v = g.successors(v)[0];\n    }\n  });\n}\n\n// Find a path from v to w through the lowest common ancestor (LCA). Return the\n// full path and the LCA.\nfunction findPath(g, postorderNums, v, w) {\n  var vPath = [];\n  var wPath = [];\n  var low = Math.min(postorderNums[v].low, postorderNums[w].low);\n  var lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);\n  var parent;\n  var lca;\n\n  // Traverse up from v to find the LCA\n  parent = v;\n  do {\n    parent = g.parent(parent);\n    vPath.push(parent);\n  } while (parent && (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\n  lca = parent;\n\n  // Traverse from w to LCA\n  parent = w;\n  while ((parent = g.parent(parent)) !== lca) {\n    wPath.push(parent);\n  }\n\n  return { path: vPath.concat(wPath.reverse()), lca: lca };\n}\n\nfunction postorder(g) {\n  var result = {};\n  var lim = 0;\n\n  function dfs(v) {\n    var low = lim;\n    _.forEach(g.children(v), dfs);\n    result[v] = { low: low, lim: lim++ };\n  }\n  _.forEach(g.children(), dfs);\n\n  return result;\n}\n","import * as _ from 'lodash-es';\nimport * as util from '../util.js';\nimport { positionX } from './bk.js';\n\nexport { position };\n\nfunction position(g) {\n  g = util.asNonCompoundGraph(g);\n\n  positionY(g);\n  _.forOwn(positionX(g), function (x, v) {\n    g.node(v).x = x;\n  });\n}\n\nfunction positionY(g) {\n  var layering = util.buildLayerMatrix(g);\n  var rankSep = g.graph().ranksep;\n  var prevY = 0;\n  _.forEach(layering, function (layer) {\n    var maxHeight = _.max(\n      _.map(layer, function (v) {\n        return g.node(v).height;\n      })\n    );\n    _.forEach(layer, function (v) {\n      g.node(v).y = prevY + maxHeight / 2;\n    });\n    prevY += maxHeight + rankSep;\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\n\n/*\n * This module provides coordinate assignment based on Brandes and Köpf, \"Fast\n * and Simple Horizontal Coordinate Assignment.\"\n */\n\nexport {\n  positionX,\n  findType1Conflicts,\n  findType2Conflicts,\n  addConflict,\n  hasConflict,\n  verticalAlignment,\n  horizontalCompaction,\n  alignCoordinates,\n  findSmallestWidthAlignment,\n  balance,\n};\n\n/*\n * Marks all edges in the graph with a type-1 conflict with the \"type1Conflict\"\n * property. A type-1 conflict is one where a non-inner segment crosses an\n * inner segment. An inner segment is an edge with both incident nodes marked\n * with the \"dummy\" property.\n *\n * This algorithm scans layer by layer, starting with the second, for type-1\n * conflicts between the current layer and the previous layer. For each layer\n * it scans the nodes from left to right until it reaches one that is incident\n * on an inner segment. It then scans predecessors to determine if they have\n * edges that cross that inner segment. At the end a final scan is done for all\n * nodes on the current rank to see if they cross the last visited inner\n * segment.\n *\n * This algorithm (safely) assumes that a dummy node will only be incident on a\n * single node in the layers being scanned.\n */\nfunction findType1Conflicts(g, layering) {\n  var conflicts = {};\n\n  function visitLayer(prevLayer, layer) {\n    var // last visited node in the previous layer that is incident on an inner\n      // segment.\n      k0 = 0,\n      // Tracks the last node in this layer scanned for crossings with a type-1\n      // segment.\n      scanPos = 0,\n      prevLayerLength = prevLayer.length,\n      lastNode = _.last(layer);\n\n    _.forEach(layer, function (v, i) {\n      var w = findOtherInnerSegmentNode(g, v),\n        k1 = w ? g.node(w).order : prevLayerLength;\n\n      if (w || v === lastNode) {\n        _.forEach(layer.slice(scanPos, i + 1), function (scanNode) {\n          _.forEach(g.predecessors(scanNode), function (u) {\n            var uLabel = g.node(u),\n              uPos = uLabel.order;\n            if ((uPos < k0 || k1 < uPos) && !(uLabel.dummy && g.node(scanNode).dummy)) {\n              addConflict(conflicts, u, scanNode);\n            }\n          });\n        });\n        // @ts-expect-error\n        scanPos = i + 1;\n        k0 = k1;\n      }\n    });\n\n    return layer;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findType2Conflicts(g, layering) {\n  var conflicts = {};\n\n  function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {\n    var v;\n    _.forEach(_.range(southPos, southEnd), function (i) {\n      v = south[i];\n      if (g.node(v).dummy) {\n        _.forEach(g.predecessors(v), function (u) {\n          var uNode = g.node(u);\n          if (uNode.dummy && (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {\n            addConflict(conflicts, u, v);\n          }\n        });\n      }\n    });\n  }\n\n  function visitLayer(north, south) {\n    var prevNorthPos = -1,\n      nextNorthPos,\n      southPos = 0;\n\n    _.forEach(south, function (v, southLookahead) {\n      if (g.node(v).dummy === 'border') {\n        var predecessors = g.predecessors(v);\n        if (predecessors.length) {\n          nextNorthPos = g.node(predecessors[0]).order;\n          scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);\n          // @ts-expect-error\n          southPos = southLookahead;\n          prevNorthPos = nextNorthPos;\n        }\n      }\n      scan(south, southPos, south.length, nextNorthPos, north.length);\n    });\n\n    return south;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findOtherInnerSegmentNode(g, v) {\n  if (g.node(v).dummy) {\n    return _.find(g.predecessors(v), function (u) {\n      return g.node(u).dummy;\n    });\n  }\n}\n\nfunction addConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n\n  var conflictsV = conflicts[v];\n  if (!conflictsV) {\n    conflicts[v] = conflictsV = {};\n  }\n  conflictsV[w] = true;\n}\n\nfunction hasConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return _.has(conflicts[v], w);\n}\n\n/*\n * Try to align nodes into vertical \"blocks\" where possible. This algorithm\n * attempts to align a node with one of its median neighbors. If the edge\n * connecting a neighbor is a type-1 conflict then we ignore that possibility.\n * If a previous node has already formed a block with a node after the node\n * we're trying to form a block with, we also ignore that possibility - our\n * blocks would be split in that scenario.\n */\nfunction verticalAlignment(g, layering, conflicts, neighborFn) {\n  var root = {},\n    align = {},\n    pos = {};\n\n  // We cache the position here based on the layering because the graph and\n  // layering may be out of sync. The layering matrix is manipulated to\n  // generate different extreme alignments.\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, order) {\n      root[v] = v;\n      align[v] = v;\n      pos[v] = order;\n    });\n  });\n\n  _.forEach(layering, function (layer) {\n    var prevIdx = -1;\n    _.forEach(layer, function (v) {\n      var ws = neighborFn(v);\n      if (ws.length) {\n        ws = _.sortBy(ws, function (w) {\n          return pos[w];\n        });\n        var mp = (ws.length - 1) / 2;\n        for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {\n          var w = ws[i];\n          if (align[v] === v && prevIdx < pos[w] && !hasConflict(conflicts, v, w)) {\n            align[w] = v;\n            align[v] = root[v] = root[w];\n            prevIdx = pos[w];\n          }\n        }\n      }\n    });\n  });\n\n  return { root: root, align: align };\n}\n\nfunction horizontalCompaction(g, layering, root, align, reverseSep) {\n  // This portion of the algorithm differs from BK due to a number of problems.\n  // Instead of their algorithm we construct a new block graph and do two\n  // sweeps. The first sweep places blocks with the smallest possible\n  // coordinates. The second sweep removes unused space by moving blocks to the\n  // greatest coordinates without violating separation.\n  var xs = {},\n    blockG = buildBlockGraph(g, layering, root, reverseSep),\n    borderType = reverseSep ? 'borderLeft' : 'borderRight';\n\n  function iterate(setXsFunc, nextNodesFunc) {\n    var stack = blockG.nodes();\n    var elem = stack.pop();\n    var visited = {};\n    while (elem) {\n      if (visited[elem]) {\n        setXsFunc(elem);\n      } else {\n        visited[elem] = true;\n        stack.push(elem);\n        stack = stack.concat(nextNodesFunc(elem));\n      }\n\n      elem = stack.pop();\n    }\n  }\n\n  // First pass, assign smallest coordinates\n  function pass1(elem) {\n    xs[elem] = blockG.inEdges(elem).reduce(function (acc, e) {\n      return Math.max(acc, xs[e.v] + blockG.edge(e));\n    }, 0);\n  }\n\n  // Second pass, assign greatest coordinates\n  function pass2(elem) {\n    var min = blockG.outEdges(elem).reduce(function (acc, e) {\n      return Math.min(acc, xs[e.w] - blockG.edge(e));\n    }, Number.POSITIVE_INFINITY);\n\n    var node = g.node(elem);\n    if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {\n      xs[elem] = Math.max(xs[elem], min);\n    }\n  }\n\n  iterate(pass1, blockG.predecessors.bind(blockG));\n  iterate(pass2, blockG.successors.bind(blockG));\n\n  // Assign x coordinates to all nodes\n  _.forEach(align, function (v) {\n    xs[v] = xs[root[v]];\n  });\n\n  return xs;\n}\n\nfunction buildBlockGraph(g, layering, root, reverseSep) {\n  var blockGraph = new Graph(),\n    graphLabel = g.graph(),\n    sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);\n\n  _.forEach(layering, function (layer) {\n    var u;\n    _.forEach(layer, function (v) {\n      var vRoot = root[v];\n      blockGraph.setNode(vRoot);\n      if (u) {\n        var uRoot = root[u],\n          prevMax = blockGraph.edge(uRoot, vRoot);\n        blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));\n      }\n      u = v;\n    });\n  });\n\n  return blockGraph;\n}\n\n/*\n * Returns the alignment that has the smallest width of the given alignments.\n */\nfunction findSmallestWidthAlignment(g, xss) {\n  return _.minBy(_.values(xss), function (xs) {\n    var max = Number.NEGATIVE_INFINITY;\n    var min = Number.POSITIVE_INFINITY;\n\n    _.forIn(xs, function (x, v) {\n      var halfWidth = width(g, v) / 2;\n\n      max = Math.max(x + halfWidth, max);\n      min = Math.min(x - halfWidth, min);\n    });\n\n    return max - min;\n  });\n}\n\n/*\n * Align the coordinates of each of the layout alignments such that\n * left-biased alignments have their minimum coordinate at the same point as\n * the minimum coordinate of the smallest width alignment and right-biased\n * alignments have their maximum coordinate at the same point as the maximum\n * coordinate of the smallest width alignment.\n */\nfunction alignCoordinates(xss, alignTo) {\n  var alignToVals = _.values(alignTo),\n    alignToMin = _.min(alignToVals),\n    alignToMax = _.max(alignToVals);\n\n  _.forEach(['u', 'd'], function (vert) {\n    _.forEach(['l', 'r'], function (horiz) {\n      var alignment = vert + horiz,\n        xs = xss[alignment],\n        delta;\n      if (xs === alignTo) return;\n\n      var xsVals = _.values(xs);\n      delta = horiz === 'l' ? alignToMin - _.min(xsVals) : alignToMax - _.max(xsVals);\n\n      if (delta) {\n        xss[alignment] = _.mapValues(xs, function (x) {\n          return x + delta;\n        });\n      }\n    });\n  });\n}\n\nfunction balance(xss, align) {\n  return _.mapValues(xss.ul, function (ignore, v) {\n    if (align) {\n      return xss[align.toLowerCase()][v];\n    } else {\n      var xs = _.sortBy(_.map(xss, v));\n      return (xs[1] + xs[2]) / 2;\n    }\n  });\n}\n\nfunction positionX(g) {\n  var layering = util.buildLayerMatrix(g);\n  var conflicts = _.merge(findType1Conflicts(g, layering), findType2Conflicts(g, layering));\n\n  var xss = {};\n  var adjustedLayering;\n  _.forEach(['u', 'd'], function (vert) {\n    adjustedLayering = vert === 'u' ? layering : _.values(layering).reverse();\n    _.forEach(['l', 'r'], function (horiz) {\n      if (horiz === 'r') {\n        adjustedLayering = _.map(adjustedLayering, function (inner) {\n          return _.values(inner).reverse();\n        });\n      }\n\n      var neighborFn = (vert === 'u' ? g.predecessors : g.successors).bind(g);\n      var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\n      var xs = horizontalCompaction(g, adjustedLayering, align.root, align.align, horiz === 'r');\n      if (horiz === 'r') {\n        xs = _.mapValues(xs, function (x) {\n          return -x;\n        });\n      }\n      xss[vert + horiz] = xs;\n    });\n  });\n\n  var smallestWidth = findSmallestWidthAlignment(g, xss);\n  alignCoordinates(xss, smallestWidth);\n  return balance(xss, g.graph().align);\n}\n\nfunction sep(nodeSep, edgeSep, reverseSep) {\n  return function (g, v, w) {\n    var vLabel = g.node(v);\n    var wLabel = g.node(w);\n    var sum = 0;\n    var delta;\n\n    sum += vLabel.width / 2;\n    if (_.has(vLabel, 'labelpos')) {\n      switch (vLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = -vLabel.width / 2;\n          break;\n        case 'r':\n          delta = vLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;\n    sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;\n\n    sum += wLabel.width / 2;\n    if (_.has(wLabel, 'labelpos')) {\n      switch (wLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = wLabel.width / 2;\n          break;\n        case 'r':\n          delta = -wLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    return sum;\n  };\n}\n\nfunction width(g, v) {\n  return g.node(v).width;\n}\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","__globalThis","parcelHelpers","defineInteropFlag","export","_acyclicJs","_normalizeJs","_indexJs","rank","_layoutJs","layout","run","undo","_lodashEs","_greedyFasJs","g","fas","stack","visited","graph","acyclicer","greedyFAS","e","edge","weight","forEach","nodes","dfs","v","has","outEdges","w","push","label","removeEdge","forwardName","reversed","setEdge","uniqueId","edges","_listJs","DEFAULT_WEIGHT_FN","constant","weightFn","nodeCount","fasGraph","maxIn","maxOut","buckets","zeroIdx","state","Graph","setNode","in","out","prevWeight","Math","max","node","range","map","List","assignBucket","results","doGreedyFAS","sources","sinks","dequeue","removeNode","concat","flatten","collectPredecessors","undefined","inEdges","uEntry","wEntry","enqueue","constructor","sentinel","_next","_prev","_sentinel","unlink","toString","strs","curr","JSON","stringify","filterOutLinks","join","k","_addBorderSegmentsJs","_coordinateSystemJs","_indexJs1","_nestingGraphJs","_indexJs2","_parentDummyChainsJs","_indexJs3","_utilJs","opts","time","debugTiming","notime","layoutGraph","multigraph","compound","canonicalize","inputGraph","setGraph","merge","graphDefaults","selectNumberAttrs","graphNumAttrs","pick","graphAttrs","defaults","nodeNumAttrs","nodeDefaults","setParent","edgeDefaults","edgeNumAttrs","edgeAttrs","ranksep","minlen","labelpos","toLowerCase","rankdir","width","labeloffset","height","selfEdges","asNonCompoundGraph","addDummyNode","removeEmptyRanks","cleanup","normalizeRanks","maxRank","borderTop","minRank","borderBottom","dummy","labelRank","parentDummyChains","addBorderSegments","order","layers","buildLayerMatrix","layer","orderShift","selfEdge","adjust","position","selfNode","y","dx","dy","points","children","t","b","l","last","borderLeft","r","borderRight","abs","translateGraph","minX","Number","POSITIVE_INFINITY","maxX","minY","maxY","graphLabel","marginX","marginx","marginY","marginy","getExtremes","attrs","h","min","p","p1","p2","nodeV","nodeW","unshift","intersectRect","reverse","inputLabel","layoutLabel","edgesep","nodesep","obj","mapValues","newAttrs","addBorderNode","prop","prefix","sg","sgNode","prev","borderType","simplify","successorWeights","predecessorWeights","partition","type","hasNode","simplified","simpleLabel","isMultigraph","weightMap","sucs","zipObject","preds","rect","point","sx","sy","layering","isUndefined","offset","delta","nodeRankFactor","vs","arguments","collection","fn","result","lhs","rhs","value","start","now","console","log","rankDir","swapWidthHeight","reverseYOne","swapXYOne","swapWidthHeightOne","dummyChains","normalizeEdge","vRank","wRank","edgeLabel","edgeObj","origLabel","successors","_feasibleTreeJs","_networkSimplexJs","ranker","networkSimplex","longestPath","feasibleTree","longestPathRanker","directed","size","tightTree","nodeEdges","edgeV","slack","findMinSlackEdge","minBy","shiftRanks","_utilJs1","f","initLowLimValues","initCutValues","leaveEdge","enterEdge","exchangeEdges","postorder","slice","childLab","cutvalue","calcCutValue","child","childIsTail","graphEdge","cutValue","isOutEdge","other","pointsToHead","otherWeight","tree","hasEdge","otherCutValue","root","dfsAssignLowLim","nextLim","low","neighbors","lim","find","vLabel","wLabel","tailLabel","flip","candidates","filter","isDescendant","preorder","flipped","rootLabel","_componentsJs","components","_dijkstraJs","dijkstra","_dijkstraAllJs","dijkstraAll","_findCyclesJs","findCycles","_floydWarshallJs","floydWarshall","_isAcyclicJs","isAcyclic","_postorderJs","_preorderJs","_primJs","prim","_tarjanJs","tarjan","_topsortJs","topsort","cmpt","cmpts","each","predecessors","_priorityQueueJs","DEFAULT_WEIGHT_FUNC","source","edgeFn","runDijkstra","vEntry","pq","PriorityQueue","updateNeighbors","distance","predecessor","decrease","add","removeMin","String","_arr","_keyIndices","keys","key","priority","index","keyIndices","arr","_decrease","_swap","pop","_heapify","largest","j","origArrI","origArrJ","weightFunc","edgeFunc","transform","acc","onStack","lowlink","d","rowK","rowI","ik","kj","ij","altDistance","CycleException","visit","prototype","_dfsJs","isArray","navigation","isDirected","doDfs","_graphJs","parents","pri","edgeWeight","init","depths","depth","values","nodeSep","nestingRoot","sumWeights","reduce","top","bottom","childNode","childTop","childBottom","thisWeight","nestingEdge","_addSubgraphConstraintsJs","_buildLayerGraphJs","_crossCountJs","_initOrderJs","_sortSubgraphJs","downLayerGraphs","buildLayerGraphs","upLayerGraphs","initOrder","assignOrder","best","bestCC","lastBest","sweepLayerGraphs","layerGraphs","biasRight","cg","lg","sorted","sortSubgraph","addSubgraphConstraints","cc","crossCount","cloneDeep","ranks","relationship","buildLayerGraph","rootPrev","prevChild","createRootNode","setDefaultNodeLabel","u","twoLayerCrossCount","northLayer","southLayer","southPos","southEntries","sortBy","pos","firstIndex","treeSize","Array","weightSum","simpleNodes","orderedVs","movable","bl","br","subgraphs","barycenters","_barycenterJs","barycenter","subgraphResult","target","entries","_resolveConflictsJs","resolveConflicts","_sortJs","sort","blPred","brPred","inV","nodeU","sum","mappedEntries","tmp","indegree","entryV","entryW","doResolveConflicts","sourceSet","handleIn","merged","mergeEntries","handleOut","bias","parts","sortable","unsortable","vsIndex","consumeUnsortable","postorderNums","pathData","findPath","lca","vPath","wPath","path","pathIdx","pathV","ascending","_bkJs","rankSep","prevY","maxHeight","forOwn","positionX","findType1Conflicts","findType2Conflicts","addConflict","hasConflict","verticalAlignment","horizontalCompaction","alignCoordinates","findSmallestWidthAlignment","balance","conflicts","prevLayer","k0","scanPos","prevLayerLength","lastNode","findOtherInnerSegmentNode","k1","scanNode","uLabel","uPos","scan","south","southEnd","prevNorthBorder","nextNorthBorder","uNode","north","nextNorthPos","prevNorthPos","southLookahead","conflictsV","neighborFn","align","prevIdx","ws","mp","floor","il","ceil","reverseSep","edgeSep","blockGraph","sepFn","xs","blockG","vRoot","uRoot","prevMax","iterate","setXsFunc","nextNodesFunc","elem","xss","NEGATIVE_INFINITY","forIn","halfWidth","alignTo","alignToVals","alignToMin","alignToMax","vert","horiz","alignment","xsVals","ul","ignore","adjustedLayering","inner","smallestWidth"],"version":3,"file":"flowDiagram-66a62f08.5151a16b.js.map"}