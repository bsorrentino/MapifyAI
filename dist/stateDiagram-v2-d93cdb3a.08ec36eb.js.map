{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,E,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,C,E,C,M,C,S,C,C,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GC0UA,EAAA,MAAA,CAAA,EAAA,UAAA,IACE,GA3UF,IAAA,EAAA,EAAA,wBACA,EAAA,EAAA,qCACA,EAAA,EAAA,MACA,EAAA,EAAA,yBACA,EAAA,EAAA,uBACA,EAAA,aACA,EAAA,SACA,EAAA,2BACA,EAAA,aACA,EAAA,UACA,EAAA,wBACA,EAAA,sBACA,EAAA,UACA,EAAA,wBACA,EAAA,kCACA,EAAA,oCACA,EAAA,uBACA,EAAA,4BACA,EAAA,4BACA,IAAM,EAAc,OACd,EAAwB,gBAOxB,EAAc,eAEd,EAAoB,GAAG,SAA0B,CACjD,EAAW,aAGX,EAAqB,GAAG,aAA2B,CACnD,EAAmB,GAAG,QAAyB,CAE/C,EAAsB,GAAG,WAA4B,CAErD,EAA0B,GAAG,eAAgC,CAC7D,EAAS,SACT,EAAO,OAEP,EAAoB,OACpB,EAAU,CAAA,EAAG,EAAA,EAAoB,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","sources":["<anon>","node_modules/mermaid/dist/stateDiagram-v2-d93cdb3a.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        globalObject\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"f8gmr\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"diagram\", ()=>diagram);\nvar _styles6Aaf32CfJs = require(\"./styles-6aaf32cf.js\");\nvar _indexJs = require(\"dagre-d3-es/src/graphlib/index.js\");\nvar _d3 = require(\"d3\");\nvar _mermaidB5860B54Js = require(\"./mermaid-b5860b54.js\");\nvar _index3862675EJs = require(\"./index-3862675e.js\");\nvar _tsDedent = require(\"ts-dedent\");\nvar _dayjs = require(\"dayjs\");\nvar _sanitizeUrl = require(\"@braintree/sanitize-url\");\nvar _dompurify = require(\"dompurify\");\nvar _khroma = require(\"khroma\");\nvar _memoizeJs = require(\"lodash-es/memoize.js\");\nvar _mergeJs = require(\"lodash-es/merge.js\");\nvar _stylis = require(\"stylis\");\nvar _isEmptyJs = require(\"lodash-es/isEmpty.js\");\nvar _indexJs1 = require(\"dagre-d3-es/src/dagre/index.js\");\nvar _jsonJs = require(\"dagre-d3-es/src/graphlib/json.js\");\nvar _edgesE0Da2A9EJs = require(\"./edges-e0da2a9e.js\");\nvar _createText2E5E7Dd3Js = require(\"./createText-2e5e7dd3.js\");\nvar _mdastUtilFromMarkdown = require(\"mdast-util-from-markdown\");\nconst SHAPE_STATE = \"rect\";\nconst SHAPE_STATE_WITH_DESC = \"rectWithTitle\";\nconst SHAPE_START = \"start\";\nconst SHAPE_END = \"end\";\nconst SHAPE_DIVIDER = \"divider\";\nconst SHAPE_GROUP = \"roundedWithTitle\";\nconst SHAPE_NOTE = \"note\";\nconst SHAPE_NOTEGROUP = \"noteGroup\";\nconst CSS_DIAGRAM = \"statediagram\";\nconst CSS_STATE = \"state\";\nconst CSS_DIAGRAM_STATE = `${CSS_DIAGRAM}-${CSS_STATE}`;\nconst CSS_EDGE = \"transition\";\nconst CSS_NOTE = \"note\";\nconst CSS_NOTE_EDGE = \"note-edge\";\nconst CSS_EDGE_NOTE_EDGE = `${CSS_EDGE} ${CSS_NOTE_EDGE}`;\nconst CSS_DIAGRAM_NOTE = `${CSS_DIAGRAM}-${CSS_NOTE}`;\nconst CSS_CLUSTER = \"cluster\";\nconst CSS_DIAGRAM_CLUSTER = `${CSS_DIAGRAM}-${CSS_CLUSTER}`;\nconst CSS_CLUSTER_ALT = \"cluster-alt\";\nconst CSS_DIAGRAM_CLUSTER_ALT = `${CSS_DIAGRAM}-${CSS_CLUSTER_ALT}`;\nconst PARENT = \"parent\";\nconst NOTE = \"note\";\nconst DOMID_STATE = \"state\";\nconst DOMID_TYPE_SPACER = \"----\";\nconst NOTE_ID = `${DOMID_TYPE_SPACER}${NOTE}`;\nconst PARENT_ID = `${DOMID_TYPE_SPACER}${PARENT}`;\nconst G_EDGE_STYLE = \"fill:none\";\nconst G_EDGE_ARROWHEADSTYLE = \"fill: #333\";\nconst G_EDGE_LABELPOS = \"c\";\nconst G_EDGE_LABELTYPE = \"text\";\nconst G_EDGE_THICKNESS = \"normal\";\nlet nodeDb = {};\nlet graphItemCount = 0;\nconst setConf = function(cnf) {\n    const keys = Object.keys(cnf);\n    for (const key of keys)cnf[key];\n};\nconst getClasses = function(text, diagramObj) {\n    diagramObj.db.extract(diagramObj.db.getRootDocV2());\n    return diagramObj.db.getClasses();\n};\nfunction getClassesFromDbInfo(dbInfoItem) {\n    if (dbInfoItem === void 0 || dbInfoItem === null) return \"\";\n    else {\n        if (dbInfoItem.classes) return dbInfoItem.classes.join(\" \");\n        else return \"\";\n    }\n}\nfunction stateDomId(itemId = \"\", counter = 0, type = \"\", typeSpacer = DOMID_TYPE_SPACER) {\n    const typeStr = type !== null && type.length > 0 ? `${typeSpacer}${type}` : \"\";\n    return `${DOMID_STATE}-${itemId}${typeStr}-${counter}`;\n}\nconst setupNode = (g, parent, parsedItem, diagramStates, diagramDb, altFlag)=>{\n    const itemId = parsedItem.id;\n    const classStr = getClassesFromDbInfo(diagramStates[itemId]);\n    if (itemId !== \"root\") {\n        let shape = SHAPE_STATE;\n        if (parsedItem.start === true) shape = SHAPE_START;\n        if (parsedItem.start === false) shape = SHAPE_END;\n        if (parsedItem.type !== (0, _styles6Aaf32CfJs.D)) shape = parsedItem.type;\n        if (!nodeDb[itemId]) nodeDb[itemId] = {\n            id: itemId,\n            shape,\n            description: (0, _mermaidB5860B54Js.e).sanitizeText(itemId, (0, _mermaidB5860B54Js.c)()),\n            classes: `${classStr} ${CSS_DIAGRAM_STATE}`\n        };\n        const newNode = nodeDb[itemId];\n        if (parsedItem.description) {\n            if (Array.isArray(newNode.description)) {\n                newNode.shape = SHAPE_STATE_WITH_DESC;\n                newNode.description.push(parsedItem.description);\n            } else if (newNode.description.length > 0) {\n                newNode.shape = SHAPE_STATE_WITH_DESC;\n                if (newNode.description === itemId) newNode.description = [\n                    parsedItem.description\n                ];\n                else newNode.description = [\n                    newNode.description,\n                    parsedItem.description\n                ];\n            } else {\n                newNode.shape = SHAPE_STATE;\n                newNode.description = parsedItem.description;\n            }\n            newNode.description = (0, _mermaidB5860B54Js.e).sanitizeTextOrArray(newNode.description, (0, _mermaidB5860B54Js.c)());\n        }\n        if (newNode.description.length === 1 && newNode.shape === SHAPE_STATE_WITH_DESC) newNode.shape = SHAPE_STATE;\n        if (!newNode.type && parsedItem.doc) {\n            (0, _mermaidB5860B54Js.l).info(\"Setting cluster for \", itemId, getDir(parsedItem));\n            newNode.type = \"group\";\n            newNode.dir = getDir(parsedItem);\n            newNode.shape = parsedItem.type === (0, _styles6Aaf32CfJs.a) ? SHAPE_DIVIDER : SHAPE_GROUP;\n            newNode.classes = newNode.classes + \" \" + CSS_DIAGRAM_CLUSTER + \" \" + (altFlag ? CSS_DIAGRAM_CLUSTER_ALT : \"\");\n        }\n        const nodeData = {\n            labelStyle: \"\",\n            shape: newNode.shape,\n            labelText: newNode.description,\n            // typeof newNode.description === 'object'\n            //   ? newNode.description[0]\n            //   : newNode.description,\n            classes: newNode.classes,\n            style: \"\",\n            //styles.style,\n            id: itemId,\n            dir: newNode.dir,\n            domId: stateDomId(itemId, graphItemCount),\n            type: newNode.type,\n            padding: 15\n        };\n        nodeData.centerLabel = true;\n        if (parsedItem.note) {\n            const noteData = {\n                labelStyle: \"\",\n                shape: SHAPE_NOTE,\n                labelText: parsedItem.note.text,\n                classes: CSS_DIAGRAM_NOTE,\n                // useHtmlLabels: false,\n                style: \"\",\n                // styles.style,\n                id: itemId + NOTE_ID + \"-\" + graphItemCount,\n                domId: stateDomId(itemId, graphItemCount, NOTE),\n                type: newNode.type,\n                padding: 15\n            };\n            const groupData = {\n                labelStyle: \"\",\n                shape: SHAPE_NOTEGROUP,\n                labelText: parsedItem.note.text,\n                classes: newNode.classes,\n                style: \"\",\n                // styles.style,\n                id: itemId + PARENT_ID,\n                domId: stateDomId(itemId, graphItemCount, PARENT),\n                type: \"group\",\n                padding: 0\n            };\n            graphItemCount++;\n            const parentNodeId = itemId + PARENT_ID;\n            g.setNode(parentNodeId, groupData);\n            g.setNode(noteData.id, noteData);\n            g.setNode(itemId, nodeData);\n            g.setParent(itemId, parentNodeId);\n            g.setParent(noteData.id, parentNodeId);\n            let from = itemId;\n            let to = noteData.id;\n            if (parsedItem.note.position === \"left of\") {\n                from = noteData.id;\n                to = itemId;\n            }\n            g.setEdge(from, to, {\n                arrowhead: \"none\",\n                arrowType: \"\",\n                style: G_EDGE_STYLE,\n                labelStyle: \"\",\n                classes: CSS_EDGE_NOTE_EDGE,\n                arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n                labelpos: G_EDGE_LABELPOS,\n                labelType: G_EDGE_LABELTYPE,\n                thickness: G_EDGE_THICKNESS\n            });\n        } else g.setNode(itemId, nodeData);\n    }\n    if (parent && parent.id !== \"root\") {\n        (0, _mermaidB5860B54Js.l).trace(\"Setting node \", itemId, \" to be child of its parent \", parent.id);\n        g.setParent(itemId, parent.id);\n    }\n    if (parsedItem.doc) {\n        (0, _mermaidB5860B54Js.l).trace(\"Adding nodes children \");\n        setupDoc(g, parsedItem, parsedItem.doc, diagramStates, diagramDb, !altFlag);\n    }\n};\nconst setupDoc = (g, parentParsedItem, doc, diagramStates, diagramDb, altFlag)=>{\n    (0, _mermaidB5860B54Js.l).trace(\"items\", doc);\n    doc.forEach((item)=>{\n        switch(item.stmt){\n            case 0, _styles6Aaf32CfJs.b:\n                setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n                break;\n            case 0, _styles6Aaf32CfJs.D:\n                setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n                break;\n            case 0, _styles6Aaf32CfJs.S:\n                {\n                    setupNode(g, parentParsedItem, item.state1, diagramStates, diagramDb, altFlag);\n                    setupNode(g, parentParsedItem, item.state2, diagramStates, diagramDb, altFlag);\n                    const edgeData = {\n                        id: \"edge\" + graphItemCount,\n                        arrowhead: \"normal\",\n                        arrowTypeEnd: \"arrow_barb\",\n                        style: G_EDGE_STYLE,\n                        labelStyle: \"\",\n                        label: (0, _mermaidB5860B54Js.e).sanitizeText(item.description, (0, _mermaidB5860B54Js.c)()),\n                        arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n                        labelpos: G_EDGE_LABELPOS,\n                        labelType: G_EDGE_LABELTYPE,\n                        thickness: G_EDGE_THICKNESS,\n                        classes: CSS_EDGE\n                    };\n                    g.setEdge(item.state1.id, item.state2.id, edgeData, graphItemCount);\n                    graphItemCount++;\n                }\n                break;\n        }\n    });\n};\nconst getDir = (parsedItem, defaultDir = (0, _styles6Aaf32CfJs.c))=>{\n    let dir = defaultDir;\n    if (parsedItem.doc) for(let i = 0; i < parsedItem.doc.length; i++){\n        const parsedItemDoc = parsedItem.doc[i];\n        if (parsedItemDoc.stmt === \"dir\") dir = parsedItemDoc.value;\n    }\n    return dir;\n};\nconst draw = async function(text, id, _version, diag) {\n    (0, _mermaidB5860B54Js.l).info(\"Drawing state diagram (v2)\", id);\n    nodeDb = {};\n    diag.db.getDirection();\n    const { securityLevel, state: conf } = (0, _mermaidB5860B54Js.c)();\n    const nodeSpacing = conf.nodeSpacing || 50;\n    const rankSpacing = conf.rankSpacing || 50;\n    (0, _mermaidB5860B54Js.l).info(diag.db.getRootDocV2());\n    diag.db.extract(diag.db.getRootDocV2());\n    (0, _mermaidB5860B54Js.l).info(diag.db.getRootDocV2());\n    const diagramStates = diag.db.getStates();\n    const g = new _indexJs.Graph({\n        multigraph: true,\n        compound: true\n    }).setGraph({\n        rankdir: getDir(diag.db.getRootDocV2()),\n        nodesep: nodeSpacing,\n        ranksep: rankSpacing,\n        marginx: 8,\n        marginy: 8\n    }).setDefaultEdgeLabel(function() {\n        return {};\n    });\n    setupNode(g, void 0, diag.db.getRootDocV2(), diagramStates, diag.db, true);\n    let sandboxElement;\n    if (securityLevel === \"sandbox\") sandboxElement = (0, _d3.select)(\"#i\" + id);\n    const root = securityLevel === \"sandbox\" ? (0, _d3.select)(sandboxElement.nodes()[0].contentDocument.body) : (0, _d3.select)(\"body\");\n    const svg = root.select(`[id=\"${id}\"]`);\n    const element = root.select(\"#\" + id + \" g\");\n    await (0, _index3862675EJs.r)(element, g, [\n        \"barb\"\n    ], CSS_DIAGRAM, id);\n    const padding = 8;\n    (0, _mermaidB5860B54Js.u).insertTitle(svg, \"statediagramTitleText\", conf.titleTopMargin, diag.db.getDiagramTitle());\n    const bounds = svg.node().getBBox();\n    const width = bounds.width + padding * 2;\n    const height = bounds.height + padding * 2;\n    svg.attr(\"class\", CSS_DIAGRAM);\n    const svgBounds = svg.node().getBBox();\n    (0, _mermaidB5860B54Js.i)(svg, height, width, conf.useMaxWidth);\n    const vBox = `${svgBounds.x - padding} ${svgBounds.y - padding} ${width} ${height}`;\n    (0, _mermaidB5860B54Js.l).debug(`viewBox ${vBox}`);\n    svg.attr(\"viewBox\", vBox);\n    const labels = document.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n    for (const label of labels){\n        const dim = label.getBBox();\n        const rect = document.createElementNS(\"http://www.w3.org/2000/svg\", SHAPE_STATE);\n        rect.setAttribute(\"rx\", 0);\n        rect.setAttribute(\"ry\", 0);\n        rect.setAttribute(\"width\", dim.width);\n        rect.setAttribute(\"height\", dim.height);\n        label.insertBefore(rect, label.firstChild);\n    }\n};\nconst renderer = {\n    setConf,\n    getClasses,\n    draw\n};\nconst diagram = {\n    parser: (0, _styles6Aaf32CfJs.p),\n    db: (0, _styles6Aaf32CfJs.d),\n    renderer,\n    styles: (0, _styles6Aaf32CfJs.s),\n    init: (cnf)=>{\n        if (!cnf.state) cnf.state = {};\n        cnf.state.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n        (0, _styles6Aaf32CfJs.d).clear();\n    }\n};\n\n},{\"./styles-6aaf32cf.js\":\"gNw0p\",\"dagre-d3-es/src/graphlib/index.js\":\"j6NXy\",\"d3\":\"ahWNw\",\"./mermaid-b5860b54.js\":\"2omMO\",\"./index-3862675e.js\":\"8RdUO\",\"ts-dedent\":\"azOLv\",\"dayjs\":\"8F3kd\",\"@braintree/sanitize-url\":\"eIPUt\",\"dompurify\":\"5cPaM\",\"khroma\":\"kb6Zw\",\"lodash-es/memoize.js\":\"kSZfU\",\"lodash-es/merge.js\":\"ije1P\",\"stylis\":\"lfeQC\",\"lodash-es/isEmpty.js\":\"941eg\",\"dagre-d3-es/src/dagre/index.js\":\"9xp7T\",\"dagre-d3-es/src/graphlib/json.js\":\"5pdrN\",\"./edges-e0da2a9e.js\":\"3cEzO\",\"./createText-2e5e7dd3.js\":\"3A2vP\",\"mdast-util-from-markdown\":\"i9FLz\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}]},[], null, \"parcelRequire94c2\")\n\n//# sourceMappingURL=stateDiagram-v2-d93cdb3a.08ec36eb.js.map\n","import { D as DEFAULT_STATE_TYPE, a as DIVIDER_TYPE, S as STMT_RELATION, b as STMT_STATE, c as DEFAULT_NESTED_DOC_DIR, p as parser, d as db, s as styles } from \"./styles-6aaf32cf.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { select } from \"d3\";\nimport { l as log, c as getConfig, u as utils, i as configureSvgSize, e as common } from \"./mermaid-b5860b54.js\";\nimport { r as render } from \"./index-3862675e.js\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nimport \"dagre-d3-es/src/dagre/index.js\";\nimport \"dagre-d3-es/src/graphlib/json.js\";\nimport \"./edges-e0da2a9e.js\";\nimport \"./createText-2e5e7dd3.js\";\nimport \"mdast-util-from-markdown\";\nconst SHAPE_STATE = \"rect\";\nconst SHAPE_STATE_WITH_DESC = \"rectWithTitle\";\nconst SHAPE_START = \"start\";\nconst SHAPE_END = \"end\";\nconst SHAPE_DIVIDER = \"divider\";\nconst SHAPE_GROUP = \"roundedWithTitle\";\nconst SHAPE_NOTE = \"note\";\nconst SHAPE_NOTEGROUP = \"noteGroup\";\nconst CSS_DIAGRAM = \"statediagram\";\nconst CSS_STATE = \"state\";\nconst CSS_DIAGRAM_STATE = `${CSS_DIAGRAM}-${CSS_STATE}`;\nconst CSS_EDGE = \"transition\";\nconst CSS_NOTE = \"note\";\nconst CSS_NOTE_EDGE = \"note-edge\";\nconst CSS_EDGE_NOTE_EDGE = `${CSS_EDGE} ${CSS_NOTE_EDGE}`;\nconst CSS_DIAGRAM_NOTE = `${CSS_DIAGRAM}-${CSS_NOTE}`;\nconst CSS_CLUSTER = \"cluster\";\nconst CSS_DIAGRAM_CLUSTER = `${CSS_DIAGRAM}-${CSS_CLUSTER}`;\nconst CSS_CLUSTER_ALT = \"cluster-alt\";\nconst CSS_DIAGRAM_CLUSTER_ALT = `${CSS_DIAGRAM}-${CSS_CLUSTER_ALT}`;\nconst PARENT = \"parent\";\nconst NOTE = \"note\";\nconst DOMID_STATE = \"state\";\nconst DOMID_TYPE_SPACER = \"----\";\nconst NOTE_ID = `${DOMID_TYPE_SPACER}${NOTE}`;\nconst PARENT_ID = `${DOMID_TYPE_SPACER}${PARENT}`;\nconst G_EDGE_STYLE = \"fill:none\";\nconst G_EDGE_ARROWHEADSTYLE = \"fill: #333\";\nconst G_EDGE_LABELPOS = \"c\";\nconst G_EDGE_LABELTYPE = \"text\";\nconst G_EDGE_THICKNESS = \"normal\";\nlet nodeDb = {};\nlet graphItemCount = 0;\nconst setConf = function(cnf) {\n  const keys = Object.keys(cnf);\n  for (const key of keys) {\n    cnf[key];\n  }\n};\nconst getClasses = function(text, diagramObj) {\n  diagramObj.db.extract(diagramObj.db.getRootDocV2());\n  return diagramObj.db.getClasses();\n};\nfunction getClassesFromDbInfo(dbInfoItem) {\n  if (dbInfoItem === void 0 || dbInfoItem === null) {\n    return \"\";\n  } else {\n    if (dbInfoItem.classes) {\n      return dbInfoItem.classes.join(\" \");\n    } else {\n      return \"\";\n    }\n  }\n}\nfunction stateDomId(itemId = \"\", counter = 0, type = \"\", typeSpacer = DOMID_TYPE_SPACER) {\n  const typeStr = type !== null && type.length > 0 ? `${typeSpacer}${type}` : \"\";\n  return `${DOMID_STATE}-${itemId}${typeStr}-${counter}`;\n}\nconst setupNode = (g, parent, parsedItem, diagramStates, diagramDb, altFlag) => {\n  const itemId = parsedItem.id;\n  const classStr = getClassesFromDbInfo(diagramStates[itemId]);\n  if (itemId !== \"root\") {\n    let shape = SHAPE_STATE;\n    if (parsedItem.start === true) {\n      shape = SHAPE_START;\n    }\n    if (parsedItem.start === false) {\n      shape = SHAPE_END;\n    }\n    if (parsedItem.type !== DEFAULT_STATE_TYPE) {\n      shape = parsedItem.type;\n    }\n    if (!nodeDb[itemId]) {\n      nodeDb[itemId] = {\n        id: itemId,\n        shape,\n        description: common.sanitizeText(itemId, getConfig()),\n        classes: `${classStr} ${CSS_DIAGRAM_STATE}`\n      };\n    }\n    const newNode = nodeDb[itemId];\n    if (parsedItem.description) {\n      if (Array.isArray(newNode.description)) {\n        newNode.shape = SHAPE_STATE_WITH_DESC;\n        newNode.description.push(parsedItem.description);\n      } else {\n        if (newNode.description.length > 0) {\n          newNode.shape = SHAPE_STATE_WITH_DESC;\n          if (newNode.description === itemId) {\n            newNode.description = [parsedItem.description];\n          } else {\n            newNode.description = [newNode.description, parsedItem.description];\n          }\n        } else {\n          newNode.shape = SHAPE_STATE;\n          newNode.description = parsedItem.description;\n        }\n      }\n      newNode.description = common.sanitizeTextOrArray(newNode.description, getConfig());\n    }\n    if (newNode.description.length === 1 && newNode.shape === SHAPE_STATE_WITH_DESC) {\n      newNode.shape = SHAPE_STATE;\n    }\n    if (!newNode.type && parsedItem.doc) {\n      log.info(\"Setting cluster for \", itemId, getDir(parsedItem));\n      newNode.type = \"group\";\n      newNode.dir = getDir(parsedItem);\n      newNode.shape = parsedItem.type === DIVIDER_TYPE ? SHAPE_DIVIDER : SHAPE_GROUP;\n      newNode.classes = newNode.classes + \" \" + CSS_DIAGRAM_CLUSTER + \" \" + (altFlag ? CSS_DIAGRAM_CLUSTER_ALT : \"\");\n    }\n    const nodeData = {\n      labelStyle: \"\",\n      shape: newNode.shape,\n      labelText: newNode.description,\n      // typeof newNode.description === 'object'\n      //   ? newNode.description[0]\n      //   : newNode.description,\n      classes: newNode.classes,\n      style: \"\",\n      //styles.style,\n      id: itemId,\n      dir: newNode.dir,\n      domId: stateDomId(itemId, graphItemCount),\n      type: newNode.type,\n      padding: 15\n      //getConfig().flowchart.padding\n    };\n    nodeData.centerLabel = true;\n    if (parsedItem.note) {\n      const noteData = {\n        labelStyle: \"\",\n        shape: SHAPE_NOTE,\n        labelText: parsedItem.note.text,\n        classes: CSS_DIAGRAM_NOTE,\n        // useHtmlLabels: false,\n        style: \"\",\n        // styles.style,\n        id: itemId + NOTE_ID + \"-\" + graphItemCount,\n        domId: stateDomId(itemId, graphItemCount, NOTE),\n        type: newNode.type,\n        padding: 15\n        //getConfig().flowchart.padding\n      };\n      const groupData = {\n        labelStyle: \"\",\n        shape: SHAPE_NOTEGROUP,\n        labelText: parsedItem.note.text,\n        classes: newNode.classes,\n        style: \"\",\n        // styles.style,\n        id: itemId + PARENT_ID,\n        domId: stateDomId(itemId, graphItemCount, PARENT),\n        type: \"group\",\n        padding: 0\n        //getConfig().flowchart.padding\n      };\n      graphItemCount++;\n      const parentNodeId = itemId + PARENT_ID;\n      g.setNode(parentNodeId, groupData);\n      g.setNode(noteData.id, noteData);\n      g.setNode(itemId, nodeData);\n      g.setParent(itemId, parentNodeId);\n      g.setParent(noteData.id, parentNodeId);\n      let from = itemId;\n      let to = noteData.id;\n      if (parsedItem.note.position === \"left of\") {\n        from = noteData.id;\n        to = itemId;\n      }\n      g.setEdge(from, to, {\n        arrowhead: \"none\",\n        arrowType: \"\",\n        style: G_EDGE_STYLE,\n        labelStyle: \"\",\n        classes: CSS_EDGE_NOTE_EDGE,\n        arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n        labelpos: G_EDGE_LABELPOS,\n        labelType: G_EDGE_LABELTYPE,\n        thickness: G_EDGE_THICKNESS\n      });\n    } else {\n      g.setNode(itemId, nodeData);\n    }\n  }\n  if (parent && parent.id !== \"root\") {\n    log.trace(\"Setting node \", itemId, \" to be child of its parent \", parent.id);\n    g.setParent(itemId, parent.id);\n  }\n  if (parsedItem.doc) {\n    log.trace(\"Adding nodes children \");\n    setupDoc(g, parsedItem, parsedItem.doc, diagramStates, diagramDb, !altFlag);\n  }\n};\nconst setupDoc = (g, parentParsedItem, doc, diagramStates, diagramDb, altFlag) => {\n  log.trace(\"items\", doc);\n  doc.forEach((item) => {\n    switch (item.stmt) {\n      case STMT_STATE:\n        setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n        break;\n      case DEFAULT_STATE_TYPE:\n        setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n        break;\n      case STMT_RELATION:\n        {\n          setupNode(g, parentParsedItem, item.state1, diagramStates, diagramDb, altFlag);\n          setupNode(g, parentParsedItem, item.state2, diagramStates, diagramDb, altFlag);\n          const edgeData = {\n            id: \"edge\" + graphItemCount,\n            arrowhead: \"normal\",\n            arrowTypeEnd: \"arrow_barb\",\n            style: G_EDGE_STYLE,\n            labelStyle: \"\",\n            label: common.sanitizeText(item.description, getConfig()),\n            arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n            labelpos: G_EDGE_LABELPOS,\n            labelType: G_EDGE_LABELTYPE,\n            thickness: G_EDGE_THICKNESS,\n            classes: CSS_EDGE\n          };\n          g.setEdge(item.state1.id, item.state2.id, edgeData, graphItemCount);\n          graphItemCount++;\n        }\n        break;\n    }\n  });\n};\nconst getDir = (parsedItem, defaultDir = DEFAULT_NESTED_DOC_DIR) => {\n  let dir = defaultDir;\n  if (parsedItem.doc) {\n    for (let i = 0; i < parsedItem.doc.length; i++) {\n      const parsedItemDoc = parsedItem.doc[i];\n      if (parsedItemDoc.stmt === \"dir\") {\n        dir = parsedItemDoc.value;\n      }\n    }\n  }\n  return dir;\n};\nconst draw = async function(text, id, _version, diag) {\n  log.info(\"Drawing state diagram (v2)\", id);\n  nodeDb = {};\n  diag.db.getDirection();\n  const { securityLevel, state: conf } = getConfig();\n  const nodeSpacing = conf.nodeSpacing || 50;\n  const rankSpacing = conf.rankSpacing || 50;\n  log.info(diag.db.getRootDocV2());\n  diag.db.extract(diag.db.getRootDocV2());\n  log.info(diag.db.getRootDocV2());\n  const diagramStates = diag.db.getStates();\n  const g = new graphlib.Graph({\n    multigraph: true,\n    compound: true\n  }).setGraph({\n    rankdir: getDir(diag.db.getRootDocV2()),\n    nodesep: nodeSpacing,\n    ranksep: rankSpacing,\n    marginx: 8,\n    marginy: 8\n  }).setDefaultEdgeLabel(function() {\n    return {};\n  });\n  setupNode(g, void 0, diag.db.getRootDocV2(), diagramStates, diag.db, true);\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const svg = root.select(`[id=\"${id}\"]`);\n  const element = root.select(\"#\" + id + \" g\");\n  await render(element, g, [\"barb\"], CSS_DIAGRAM, id);\n  const padding = 8;\n  utils.insertTitle(svg, \"statediagramTitleText\", conf.titleTopMargin, diag.db.getDiagramTitle());\n  const bounds = svg.node().getBBox();\n  const width = bounds.width + padding * 2;\n  const height = bounds.height + padding * 2;\n  svg.attr(\"class\", CSS_DIAGRAM);\n  const svgBounds = svg.node().getBBox();\n  configureSvgSize(svg, height, width, conf.useMaxWidth);\n  const vBox = `${svgBounds.x - padding} ${svgBounds.y - padding} ${width} ${height}`;\n  log.debug(`viewBox ${vBox}`);\n  svg.attr(\"viewBox\", vBox);\n  const labels = document.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n  for (const label of labels) {\n    const dim = label.getBBox();\n    const rect = document.createElementNS(\"http://www.w3.org/2000/svg\", SHAPE_STATE);\n    rect.setAttribute(\"rx\", 0);\n    rect.setAttribute(\"ry\", 0);\n    rect.setAttribute(\"width\", dim.width);\n    rect.setAttribute(\"height\", dim.height);\n    label.insertBefore(rect, label.firstChild);\n  }\n};\nconst renderer = {\n  setConf,\n  getClasses,\n  draw\n};\nconst diagram = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.state) {\n      cnf.state = {};\n    }\n    cnf.state.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  }\n};\nexport {\n  diagram\n};\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","__globalThis","parcelHelpers","defineInteropFlag","export","diagram","_styles6Aaf32CfJs","_indexJs","_d3","_mermaidB5860B54Js","_index3862675EJs","SHAPE_STATE","SHAPE_STATE_WITH_DESC","CSS_DIAGRAM","CSS_DIAGRAM_STATE","CSS_EDGE","CSS_EDGE_NOTE_EDGE","CSS_DIAGRAM_NOTE","CSS_DIAGRAM_CLUSTER","CSS_DIAGRAM_CLUSTER_ALT","PARENT","NOTE","DOMID_TYPE_SPACER","NOTE_ID","PARENT_ID","G_EDGE_STYLE","G_EDGE_ARROWHEADSTYLE","G_EDGE_LABELTYPE","G_EDGE_THICKNESS","nodeDb","graphItemCount","stateDomId","itemId","counter","type","typeSpacer","typeStr","setupNode","g","parsedItem","diagramStates","diagramDb","altFlag","dbInfoItem","classStr","classes","join","shape","start","D","description","e","sanitizeText","c","newNode","Array","isArray","push","sanitizeTextOrArray","doc","l","info","getDir","dir","a","nodeData","labelStyle","labelText","style","domId","padding","centerLabel","note","noteData","text","groupData","parentNodeId","setNode","setParent","from","to","position","setEdge","arrowhead","arrowType","arrowheadStyle","labelpos","labelType","thickness","trace","setupDoc","parentParsedItem","forEach","item","stmt","b","S","state1","state2","edgeData","arrowTypeEnd","label","defaultDir","parsedItemDoc","value","draw","_version","diag","sandboxElement","db","getDirection","securityLevel","state","conf","nodeSpacing","rankSpacing","getRootDocV2","extract","getStates","Graph","multigraph","compound","setGraph","rankdir","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","select","root","nodes","contentDocument","body","svg","element","r","u","insertTitle","titleTopMargin","getDiagramTitle","bounds","node","getBBox","width","height","attr","svgBounds","useMaxWidth","vBox","y","debug","document","querySelectorAll","dim","rect","createElementNS","setAttribute","insertBefore","firstChild","parser","p","d","renderer","setConf","cnf","key","keys","getClasses","diagramObj","styles","s","init","arrowMarkerAbsolute","clear"],"version":3,"file":"stateDiagram-v2-d93cdb3a.08ec36eb.js.map"}